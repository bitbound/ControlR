# Variable Group 'ControlR' was defined in the Variables tab
trigger:
  branches:
    include:
      - main
  paths:
    exclude:
      - README.md
  batch: True
name: $(MajorBuild).$(MinorBuild).$(Rev:r).0
jobs:
  - job: Mac_AppleSilicon_Build
    displayName: Apple Build
    pool:
      vmImage: macos-latest
    steps:
      - checkout: self
        clean: true
        fetchDepth: 1

      - task: Bash@3
        displayName: Publish ControlR.Agent (ARM64)
        inputs:
          targetType: 'inline'
          script: |
            dotnet publish -c Release -r osx-arm64 --self-contained -o "$(Build.SourcesDirectory)/ControlR.Agent/bin/publish/osx-arm64/" -p:PublishSingleFile=true -p:UseAppHost=true -p:Version=$(Build.BuildNumber) -p:FileVersion=$(Build.BuildNumber) -p:IncludeAllContentForSelfExtract=true -p:EnableCompressionInSingleFile=true -p:IncludeAppSettingsInSingleFile=true
            sudo codesign --force --deep --entitlements "$(Build.SourcesDirectory)/.build/Mac/ControlR.entitlements" --sign - "$(Build.SourcesDirectory)/ControlR.Agent/bin/publish/osx-arm64/ControlR.Agent"
          workingDirectory: '$(Build.SourcesDirectory)/ControlR.Agent'

      - task: Bash@3
        displayName: Publish ControlR.Agent (x64)
        inputs:
          targetType: 'inline'
          script: |
            dotnet publish -c Release -r osx-x64 --self-contained -o "$(Build.SourcesDirectory)/ControlR.Agent/bin/publish/osx-x64/" -p:PublishSingleFile=true -p:UseAppHost=true -p:Version=$(Build.BuildNumber) -p:FileVersion=$(Build.BuildNumber) -p:IncludeAllContentForSelfExtract=true -p:EnableCompressionInSingleFile=true -p:IncludeAppSettingsInSingleFile=true
            sudo codesign --force --deep --entitlements "$(Build.SourcesDirectory)/.build/Mac/ControlR.entitlements" --sign - "$(Build.SourcesDirectory)/ControlR.Agent/bin/publish/osx-x64/ControlR.Agent"
          workingDirectory: '$(Build.SourcesDirectory)/ControlR.Agent'

      - task: PublishPipelineArtifact@1
        displayName: Publish Agent (macOS ARM64)
        inputs:
          targetPath: ControlR.Agent/bin/publish/osx-arm64/ControlR.Agent
          artifact: Agent-macOS-ARM64
          publishLocation: pipeline

      - task: PublishPipelineArtifact@1
        displayName: Publish Agent (macOS x64)
        inputs:
          targetPath: ControlR.Agent/bin/publish/osx-x64/ControlR.Agent
          artifact: Agent-macOS-x64
          publishLocation: pipeline

      - task: Bash@3
        displayName: Publish ControlR.DesktopClient (ARM64)
        inputs:
          targetType: 'inline'
          script: |
            dotnet publish -c Release_Mac -r osx-arm64 -o "$(Build.SourcesDirectory)/ControlR.DesktopClient/bin/publish/osx-arm64/" -p:Version=$(Build.BuildNumber) -p:FileVersion=$(Build.BuildNumber)
            sudo codesign --force --deep --entitlements "$(Build.SourcesDirectory)/.build/Mac/ControlR.entitlements" --sign - "$(Build.SourcesDirectory)/ControlR.DesktopClient/bin/publish/osx-arm64/ControlR.DesktopClient"
            pwsh "$(Build.SourcesDirectory)/.build/Mac/CreateMacApp.ps1" -OutputDir "$(Build.SourcesDirectory)/ControlR.DesktopClient/bin/publish/osx-arm64/"
            ditto -c -k --sequesterRsrc "$(Build.SourcesDirectory)/ControlR.DesktopClient/bin/publish/osx-arm64/" "$(Build.SourcesDirectory)/ControlR.DesktopClient/bin/publish/osx-arm64/ControlR.app.zip"
          workingDirectory: '$(Build.SourcesDirectory)/ControlR.DesktopClient'

      - task: Bash@3
        displayName: Publish ControlR.DesktopClient (x64)
        inputs:
          targetType: 'inline'
          script: |
            dotnet publish -c Release_Mac -r osx-x64 -o "$(Build.SourcesDirectory)/ControlR.DesktopClient/bin/publish/osx-x64/" -p:Version=$(Build.BuildNumber) -p:FileVersion=$(Build.BuildNumber)
            sudo codesign --force --deep --entitlements "$(Build.SourcesDirectory)/.build/Mac/ControlR.entitlements" --sign - "$(Build.SourcesDirectory)/ControlR.DesktopClient/bin/publish/osx-x64/ControlR.DesktopClient"
            pwsh "$(Build.SourcesDirectory)/.build/Mac/CreateMacApp.ps1" -OutputDir "$(Build.SourcesDirectory)/ControlR.DesktopClient/bin/publish/osx-x64/"
            ditto -c -k --sequesterRsrc "$(Build.SourcesDirectory)/ControlR.DesktopClient/bin/publish/osx-x64/" "$(Build.SourcesDirectory)/ControlR.DesktopClient/bin/publish/osx-x64/ControlR.app.zip"
          workingDirectory: '$(Build.SourcesDirectory)/ControlR.DesktopClient'

      - task: PublishPipelineArtifact@1
        displayName: Publish DesktopClient (macOS ARM64)
        inputs:
          targetPath: ControlR.DesktopClient/bin/publish/osx-arm64/ControlR.app.zip
          artifact: DesktopClient-macOS-ARM64
          publishLocation: pipeline

      - task: PublishPipelineArtifact@1
        displayName: Publish DesktopClient (macOS x64)
        inputs:
          targetPath: ControlR.DesktopClient/bin/publish/osx-x64/ControlR.app.zip
          artifact: DesktopClient-macOS-x64
          publishLocation: pipeline

  - job: Windows_Build
    displayName: Windows Build
    dependsOn: Mac_AppleSilicon_Build
    pool:
      name: Default
      #vmImage: windows-latest
    steps:
      - task: InstallSSHKey@0
        inputs:
          knownHostsEntry: |
            github.com ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIOMqqnkVzrm0SdG6UOoqKLsabgH5C9okWi0dh2l9GKJl
            github.com ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCj7ndNxQowgcQnjshcLrqPEiiphnt+VTTvDP6mHBL9j1aNUkY4Ue1gvwnGLVlOhGeYrnZaMgRK6+PKCUXaDbC7qtbW8gIkhL7aGCsOr/C56SJMy/BCZfxd1nWzAOxSDPgVsmerOBYfNqltV9/hWCqBywINIR+5dIg6JTJ72pcEpEjcYgXkE2YEFXV1JHnsKgbLWNlhScqb2UmyRkQyytRLtL+38TGxkxCflmO+5Z8CSSNY7GidjMIZ7Q4zMjA2n1nGrlTDkzwDCsw+wqFPGQA179cnfGWOWRVruj16z6XyvxvjJwbz0wQZ75XK5tKSb7FNyeIEs4TT4jk+S4dhPeAUC5y+bDYirYgM4GC7uEnztnZyaVWQ7B381AK4Qdrwt51ZqExKbQpTUNn+EjqoTwvqNj4kqx5QUCI0ThS/YkOxJCXmPUWZbhjpCg56i+2aB6CmK2JGhn57K5mj0MNdBXA4/WnwH6XoPWJzK5Nyu2zB3nAZp+S5hpQs+p1vN1/wsjk=
            github.com ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBEmKSENjQEezOmxkZMy7opKgwFB9nkt5YRrYMjNuG5N87uRgg6CLrbo5wAdT/y6v0mKV0U2w0WZ2YB/++Tpockg=
          sshKeySecureFile: 'id_rsa'
          
      - checkout: self
        clean: true
        fetchDepth: 1
        submodules: recursive

      - task: DotNetCoreCLI@2
        displayName: Run Tests
        inputs:
          command: test
          projects: "**/Tests/**/*Tests.csproj"

      - task: DownloadPipelineArtifact@2
        displayName: Download macOS ARM64 Agent
        inputs:
          buildType: current
          artifactName: Agent-macOS-ARM64
          targetPath: $(Build.SourcesDirectory)\ControlR.Web.Server\wwwroot\downloads\osx-arm64\

      - task: DownloadPipelineArtifact@2
        displayName: Download macOS x64 Agent
        inputs:
          buildType: current
          artifactName: Agent-macOS-x64
          targetPath: $(Build.SourcesDirectory)\ControlR.Web.Server\wwwroot\downloads\osx-x64\

      - task: DownloadPipelineArtifact@2
        displayName: Download macOS ARM64 DesktopClient
        inputs:
          buildType: current
          artifactName: DesktopClient-macOS-ARM64
          targetPath: $(Build.SourcesDirectory)\ControlR.Web.Server\wwwroot\downloads\osx-arm64\

      - task: DownloadPipelineArtifact@2
        displayName: Download macOS x64 DesktopClient
        inputs:
          buildType: current
          artifactName: DesktopClient-macOS-x64
          targetPath: $(Build.SourcesDirectory)\ControlR.Web.Server\wwwroot\downloads\osx-x64\

      - task: DotNetCoreCLI@2
        displayName: Pack ControlR.ApiClient (Release)
        inputs:
          command: 'build'
          packagesToPack: 'ControlR.ApiClient/ControlR.ApiClient.csproj'
          arguments: '-c Release -p:Version=$(Build.BuildNumber)'

      - task: PublishPipelineArtifact@1
        displayName: Publish ApiClient NuGet
        inputs:
          targetPath: 'ControlR.ApiClient\bin\Release\ControlR.ApiClient.$(Build.BuildNumber).nupkg'
          artifact: ApiClientNuGet
          publishLocation: pipeline

      - task: PowerShell@2
        displayName: Invoke Build.ps1
        inputs:
          filePath: .build/Build.ps1
          arguments: -SignToolPath "$(SignToolPath)" -CertificateThumbprint "$(CertificateThumbprint)" -OutputPath "$(Build.SourcesDirectory)\ControlR.Server\bin\publish" -CurrentVersion "$(Build.BuildNumber)" -BuildAgent -BuildDesktop
          pwsh: true
          errorActionPreference: stop
          failOnStderr: true

      - task: PowerShell@2
        displayName: Verify Agent Binaries
        inputs:
          targetType: inline
          script: |
            $TestPaths = @(
              "$(Build.SourcesDirectory)\ControlR.Server\bin\publish\wwwroot\downloads\AgentVersion.txt",
              "$(Build.SourcesDirectory)\ControlR.Server\bin\publish\wwwroot\downloads\win-x86\ControlR.Agent.exe",
              "$(Build.SourcesDirectory)\ControlR.Server\bin\publish\wwwroot\downloads\win-x64\ControlR.Agent.exe",
              "$(Build.SourcesDirectory)\ControlR.Server\bin\publish\wwwroot\downloads\linux-x64\ControlR.Agent",
              "$(Build.SourcesDirectory)\ControlR.Server\bin\publish\wwwroot\downloads\osx-arm64\ControlR.Agent",
              "$(Build.SourcesDirectory)\ControlR.Server\bin\publish\wwwroot\downloads\osx-x64\ControlR.Agent",
              "$(Build.SourcesDirectory)\ControlR.Server\bin\publish\wwwroot\downloads\osx-arm64\ControlR.app.zip",
              "$(Build.SourcesDirectory)\ControlR.Server\bin\publish\wwwroot\downloads\osx-x64\ControlR.app.zip",
              "$(Build.SourcesDirectory)\ControlR.Server\bin\publish\novnc\vnc.html"
            )
            foreach ($TestPath in $TestPaths) {
              if (!(Test-Path $TestPath)) {
                Write-Error "$TestPath not found."
                exit 1
              }
            }

      - task: PublishPipelineArtifact@1
        displayName: Publish Server
        inputs:
          targetPath: ControlR.Server\bin\publish
          artifact: Server
          publishLocation: pipeline
      
      - task: PublishPipelineArtifact@1
        displayName: Publish Build Scripts
        inputs:
          targetPath: .build\
          publishLocation: pipeline
          artifact: BuildScripts

      - task: PublishPipelineArtifact@1
        displayName: Publish docker-compose.yml
        inputs:
          targetPath: docker-compose\
          publishLocation: pipeline
          artifact: DockerCompose