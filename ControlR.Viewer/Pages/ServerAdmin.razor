@page "/server-admin"
@inject IMessenger Messenger;
@inject IViewerHubConnection ViewerHub;
@inject ISnackbar Snackbar;
@inject ILogger<ServerAdmin> Logger;

<PageTitle>Server Administration</PageTitle>

<MudText Typo="Typo.h4" Color="Color.Primary" GutterBottom>
    Server Administration
</MudText>

<div class="mt-10">
    <MudText Typo="Typo.h6" Color="Color.Primary" GutterBottom>
        Server Stats
    </MudText>

    <div class="d-flex">
        <MudCard>
            <MudCardHeader Class="pa-2">
                Agent Count
            </MudCardHeader>
            <MudCardContent Class="pa-2">
                <MudText Align="Align.Center">
                    <b>
                        @(_serverAgentCount)
                    </b>
                </MudText>
            </MudCardContent>
        </MudCard>
    </div>

</div>

<div class="mt-10">
    <MudText Typo="Typo.h6" Color="Color.Primary" GutterBottom>
        Broadcast Alert
    </MudText>
    <MudText Typo="Typo.body1">
        Broadcast a message that will be displayed to all viewers.
    </MudText>

    <MudText Typo="Typo.subtitle2" Color="Color.Info" Class="mt-4">
        Message
    </MudText>
    <MudTextField T="string" @bind-Value="_alertMessage" Label="The text that will be displayed in the alert." />

    <MudText Typo="Typo.subtitle2" Color="Color.Info" Class="mt-4">
        Severity
    </MudText>
    <MudSelect 
        @bind-Value="_alertSeverity" 
        FullWidth="false"
        Label="The severity (icon and color) to use for the alert.">
        @foreach (var severity in Enum.GetValues<Severity>())
        {
            <MudSelectItem Value="@severity">
                @severity
            </MudSelectItem>
        }
    </MudSelect>

    <MudText Typo="Typo.subtitle2" Color="Color.Info" Class="mt-4">
        Sticky
    </MudText>
    <MudCheckBox 
        @bind-Value="_alertIsSticky" 
        Label="Whether the alert should persist through server reboots." />

    <div class="d-flex">
        <MudButton ButtonType="ButtonType.Button" Color="Color.Info">
            Send
        </MudButton>
        <MudButton ButtonType="ButtonType.Button" Color="Color.Default">
            Clear
        </MudButton>
    </div>

</div>

@code {
    private int _serverAgentCount;
    private string _alertMessage = string.Empty;
    private Severity _alertSeverity = Severity.Normal;
    private bool _alertIsSticky = false;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        Messenger.Register<ServerAgentConnectionCountUpdate>(
            this,
            async (subscriber, update) =>
            {
                _serverAgentCount = update.AgentCount;
                await InvokeAsync(StateHasChanged);
            }
        );

        await RefreshAgentCount();
    }

    private async Task RefreshAgentCount()
    {
        try
        {
            var result = await ViewerHub.GetAgentCount();
            if (result.IsSuccess)
            {
                _serverAgentCount = result.Value;
                return;
            }
            else
            {
                Logger.LogResult(result);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error while retrieving agent count from server.");
        }

        Snackbar.Add("Failed to retrieve agent count", Severity.Error);
    }
}
