@page "/deploy"

@inject ISettings Settings
@inject ISnackbar Snackbar

<PageTitle>Deploy</PageTitle>

<MudText Typo="Typo.h4" Color="Color.Primary" GutterBottom>
    Deploy Scripts
</MudText>

<MudText Typo="Typo.subtitle1" GutterBottom>
    Run these scripts on a remote device to install the agent.
    It will be configured with your public key, allowing you to access the device.
</MudText>


<div class="mt-10">
    <MudText Typo="Typo.h6" Color="Color.Primary" GutterBottom>
        Windows (PowerShell)
    </MudText>

    <MudTextField T="string"
                  Label="Copy and paste to deploy an agent"
                  Variant="Variant.Filled"
                  AdornmentIcon="@(Icons.Material.Filled.ContentCopy)"
                  OnAdornmentClick="CopyWindowsScript"
                  Adornment="Adornment.End"
                  Value="WindowsDeployScript"
                  Class="mb-5" />

    <MudText Typo="Typo.h6" Color="Color.Primary" GutterBottom>
        Ubuntu (Bash)
    </MudText>

    <MudTextField T="string"
                  Label="Copy and paste to deploy an agent"
                  Variant="Variant.Filled"
                  AdornmentIcon="@(Icons.Material.Filled.ContentCopy)"
                  OnAdornmentClick="CopyUbuntuScript"
                  Adornment="Adornment.End"
                  Value="UbuntuDeployScript"
                  Class="mb-5" />

    <MudText Typo="Typo.h6" Color="Color.Primary" GutterBottom>
        Options
    </MudText>

    <div class="options-grid">
        <MudText Typo="Typo.subtitle2" Color="Color.Info">
            Auto-Run VNC Server
        </MudText>
        <MudText Typo="Typo.body1">
            This will cause the ControlR agent to automatically download (if ncessary) and
            run a temporary, loopback-only TightVNC server for each session. A new, random
            password will be set for the server each time.  The VNC server will be closed
            afterward.
        </MudText>
        <MudCheckBox @bind-Checked="Settings.AutoRunVnc" Class="mb-3" />

        <MudText Typo="Typo.subtitle2" Color="Color.Info" GutterBottom>
            VNC Port
        </MudText>
        <MudText Typo="Typo.body1">
            The VNC port to use, to which the ControlR agent will proxy connections.  If
            auto-install is disabled, ControlR expects there to already be a VNC server
            running on this port.
        </MudText>
        <MudTextField T="int" @bind-Value="Settings.VncPort" />
    </div>

</div>


@code {
    private string WindowsDeployScript
    {
        get
        {
            var autoRunOption = Settings.AutoRunVnc ? "-r " : "";

            return "$ProgressPreference = \"SilentlyContinue\"; " +
                $"Invoke-WebRequest -Uri \"{Settings.ServerUri}/downloads/ControlR.Agent.exe\" -OutFile \"$env:TEMP/ControlR.Agent.exe\" -UseBasicParsing; " +
                $"Start-Process -FilePath \"$env:TEMP/ControlR.Agent.exe\" -ArgumentList \"install " +
                $"{autoRunOption}-s {Settings.ServerUri} -v {Settings.VncPort} -a {Settings.PublicKeyBase64}\" -Verb RunAs;";
        }
    }
    private string UbuntuDeployScript
    {
        get
        {
            var autoRunOption = Settings.AutoRunVnc ? "-r " : "";

            return 
                $"sudo rm -f /tmp/ControlR.Agent && " + 
                $"sudo wget -q -O /tmp/ControlR.Agent {Settings.ServerUri}/downloads/ControlR.Agent && " +
                $"sudo chmod +x /tmp/ControlR.Agent && sudo /tmp/ControlR.Agent install {autoRunOption}" +
                $"-s {Settings.ServerUri} -v {Settings.VncPort} -a {Settings.PublicKeyBase64}";
        }
    }


    private async Task CopyWindowsScript()
    {
        await Clipboard.Default.SetTextAsync(WindowsDeployScript);
        Snackbar.Add("Deploy script copied to clipboard", Severity.Success);
    }

    private async Task CopyUbuntuScript()
    {
        await Clipboard.Default.SetTextAsync(UbuntuDeployScript);
        Snackbar.Add("Deploy script copied to clipboard", Severity.Success);
    }
}
