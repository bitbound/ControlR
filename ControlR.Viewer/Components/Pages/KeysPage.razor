@page "/keys"

@inject NavigationManager NavManager
@inject ISettings Settings
@inject ISnackbar Snackbar
@inject IDialogService Dialogs
@inject IHttpConfigurer HttpConfigurer
@inject IAppState AppState
@inject IMessenger Messenger
@inject IFileSaver FileSaver
@inject ILogger<KeysPage> Logger

<PageTitle>Key Management</PageTitle>

<MudText Typo="Typo.h4" Color="Color.Primary" GutterBottom>
    Key Management
</MudText>

<div class="mt-10">
    <MudText Typo="Typo.h6" Color="Color.Primary" GutterBottom>
        Public Key
    </MudText>
    <MudTextField T="string"
                  Label="Your Public Key"
                  ReadOnly="true"
                  Variant="Variant.Filled"
                  AdornmentIcon="@(Icons.Material.Filled.ContentCopy)"
                  OnAdornmentClick="CopyPublicKey"
                  Adornment="Adornment.End"
                  Value="_publicKey" />
</div>

<div class="mt-10">
    <MudText Typo="Typo.h6" Color="Color.Primary" GutterBottom>
        Export
    </MudText>
    <MudText GutterBottom>
        Export your public/private keypair to a file, which can
        be imported on other devices.
    </MudText>
    <MudText GutterBottom>
        Your private key is encrypted using your current passphrase.
        If you store this file long-term, it's recommended that you
        put it in a secure location, such as a password vault.
    </MudText>
    <MudButton Color="Color.Info" Variant="Variant.Filled" OnClick="ExportKeypair">
        Export Keypair
    </MudButton>
</div>

<div class="mt-10">
    <MudText Typo="Typo.h6" Color="Color.Primary" GutterBottom>
        Remove
    </MudText>
    <MudText GutterBottom>
        This will remove your keypair and settings, essentially
        resetting to the app.  Export your keys first if you want
        to keep them, or they will be lost permanently.
    </MudText>
    <MudButton Color="Color.Error" Variant="Variant.Filled" OnClick="RemoveKeypair">
        Remove Keypair
    </MudButton>
</div>

@code {
    private string _publicKey = string.Empty;

    protected override void OnInitialized()
    {
        _publicKey = Settings.PublicKeyBase64;

        base.OnInitialized();
    }

    private async Task CopyPublicKey()
    {
        await Clipboard.Default.SetTextAsync(_publicKey);
        Snackbar.Add("Public key copied to clipboard", Severity.Success);
    }

    private async Task ExportKeypair()
    {
        try
        {
            var keyExport = new KeypairExport()
                {
                    EncryptedPrivateKey = Convert.ToBase64String(AppState.UserKeys.EncryptedPrivateKey),
                    PublicKey = Convert.ToBase64String(AppState.UserKeys.PublicKey),
                    Username = Settings.Username
                };

            var fileName = $"ControlR_Key_Export_{DateTime.Now:yyyyMMdd-HHmmss}.crkeys";
            using var ms = new MemoryStream();
            await JsonSerializer.SerializeAsync(ms, keyExport);
            ms.Seek(0, SeekOrigin.Begin);
            var saveResult = await FileSaver.SaveAsync(fileName, ms);
            if (!saveResult.IsSuccessful)
            {
                throw saveResult.Exception ?? new FileSaveException("Unknown save failure.");
            }
            Snackbar.Add("Exported keys successfully", Severity.Success);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error while exporting keypair.");
            Snackbar.Add("Failed to export (see logs)", Severity.Error);
        }
    }

    private async Task RemoveKeypair()
    {
        var result = await Dialogs.ShowMessageBox(
            "Confirm Removal",
            "Are you sure you want to remove your keys?  This cannot be undone.",
            yesText: "Yes",
            noText: "No"
        );

        if (result != true)
        {
            return;
        }

        AppState.RemoveUserKeys();
        await Settings.Clear();
        NavManager.NavigateTo(string.Empty, false);
    }
}
