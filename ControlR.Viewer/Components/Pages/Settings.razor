@page "/settings"
@inject ISettings SettingsStore
@inject ISnackbar Snackbar
@inject IMessenger Messenger
@inject IViewerHubConnection HubConnection
@inject IDeviceCache DeviceCache
@inject IAppState AppState
@inject IDialogService Dialogs
@inject ISettingsExporter SettingsExporter
@inject ILogger<Settings> Logger

<PageTitle>Settings</PageTitle>

<MudText Typo="Typo.h4" Color="Color.Primary" GutterBottom>
    Settings
</MudText>

<div class="mt-10">
    <MudText Typo="Typo.h6" Color="Color.Primary" GutterBottom>
        Server
    </MudText>
    <MudRadioGroup @bind-Value="ServerUriType">
        <MudRadio Value="ServerUriType.Default" Color="Color.Info">
            Default (@(AppConstants.ServerUri))
        </MudRadio>
        <MudRadio Value="ServerUriType.Custom">
            Custom
        </MudRadio>
    </MudRadioGroup>

    <MudTextField T="string"
                  @ref="_serverUriInput"
                  @bind-Value:get="Server"
                  @bind-Value:set="SetServerUri"
                  Disabled="ServerUriType != ServerUriType.Custom"
                  Validation="(string e) => ValidateServerUri(e)"
                  Label="The server URI to which the viewer connects (e.g. 'https://my.example.com')">

    </MudTextField>
</div>

<div class="mt-10">
    <MudText Typo="Typo.h6" Color="Color.Primary" GutterBottom>
        Username
    </MudText>
    <MudTextField T="string"
                  @bind-Value="Username"
                  MaxLength="25"
                  Validation="(string e) => ValidateUsername(e)"
                  Label="Shown to partners when connecting">

    </MudTextField>
</div>


<div class="mt-10">
    <MudText Typo="Typo.subtitle2" Color="Color.Info">
        Public Key Label
    </MudText>
    <MudText Typo="Typo.body1" GutterBottom>
        When deploying an agent to a remote computer, this value will be added to
        the agent's appsettings file to identify this public key.
    </MudText>
    <MudText Typo="Typo.body1" GutterBottom>
        Defaults to your Username (if set).
    </MudText>

    <MudTextField T="string"
                  MaxLength="25"
                  @bind-Value="PublicKeyLabel"
                  Validation="(string e) => ValidateLabel(e)"
                  Label="Label for your public key" />
</div>


<div class="mt-10">
    <MudText Typo="Typo.h6" Color="Color.Primary" GutterBottom>
        Show Notification to User
    </MudText>
    <MudCheckBox @bind-Value="NotifyUser"
                 Label="Notify users when a remote control session starts" />
</div>


<div class="mt-10">
    <MudText Typo="Typo.h6" Color="Color.Primary" GutterBottom>
        Import/Export Settings
    </MudText>
    <MudText>
        The export includes devices and preferences.  It does not include your public/private keypair.  That must be exported separately.
    </MudText>
    <div class="d-flex gap-4 mt-3">
        <MudButton ButtonType="ButtonType.Button" Color="Color.Default" Variant="Variant.Filled" OnClick="ExportSettings">
            Export
        </MudButton>
        <MudButton ButtonType="ButtonType.Button" Color="Color.Default" Variant="Variant.Filled" OnClick="ImportSettings">
            Import
        </MudButton>
    </div>
</div>



@code {
    private ServerUriType _serverUriType;
    private MudTextField<string>? _serverUriInput;

    protected override Task OnInitializedAsync()
    {
        if (SettingsStore.ServerUri.TrimEnd('/') != AppConstants.ServerUri.TrimEnd('/'))
        {
            _serverUriType = ServerUriType.Custom;
        }

        return base.OnInitializedAsync();
    }

    private bool NotifyUser
    {
        get => SettingsStore.NotifyUserSessionStart;
        set => SettingsStore.NotifyUserSessionStart = value;
    }

    private string Server
    {
        get => SettingsStore.ServerUri;
    }

    private ServerUriType ServerUriType
    {
        get => _serverUriType;
        set
        {
            if (value == ServerUriType.Default)
            {
                SettingsStore.ServerUri = AppConstants.ServerUri;
            }
            _serverUriType = value;
        }
    }


    private string Username
    {
        get => SettingsStore.Username;
        set
        {
            SettingsStore.Username = value;
            Snackbar.Add("Username updated", Severity.Success);
        }
    }

    private string PublicKeyLabel
    {
        get => SettingsStore.PublicKeyLabel;
        set
        {
            SettingsStore.PublicKeyLabel = value;
            Snackbar.Add("PublicKeyLabel updated", Severity.Success);
        }
    }

    private async Task ExportSettings()
    {
        try
        {
            var result = await SettingsExporter.ExportSettings();
            if (result.IsSuccess)
            {
                Snackbar.Add("Settings exported successfully", Severity.Success);
            }
            else
            {
                Logger.LogResult(result);
                var severity = result.HadException ?
                    Severity.Error :
                    Severity.Warning;

                Snackbar.Add(result.Reason, severity);
            }
        }
        catch (OperationCanceledException)
        {
            Logger.LogWarning("Export settings operation was canceled.");
            Snackbar.Add("Export operation aborted", Severity.Warning);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error while exporting settings.");
            Snackbar.Add("Failed to export settings (see logs)", Severity.Error);
        }
    }
    private async Task ImportSettings()
    {
        try
        {
            var result = await SettingsExporter.ImportSettings();
            if (result.IsSuccess)
            {
                Snackbar.Add("Settings imported successfully", Severity.Success);
            }
            else
            {
                Logger.LogResult(result);
                var severity = result.HadException ?
                    Severity.Error :
                    Severity.Warning;

                Snackbar.Add(result.Reason, severity);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error while import settings.");
            Snackbar.Add("Failed to import settings (see logs)", Severity.Error);
        }
    }


    private string? ValidateUsername(string input)
    {
        if (string.IsNullOrEmpty(input))
        {
            return null;
        }

        if (input.Length > 25)
        {
            return "Username must be 25 characters or less.";
        }

        if (AppConstants.UsernameValidator().IsMatch(input))
        {
            return "Username can only contain letters, numbers, underscores, and hyphens.";
        }

        return null;
    }

    private async Task SetServerUri(string value)
    {
        if (_serverUriInput is null)
        {
            return;
        }

        await _serverUriInput.Validate();

        if (_serverUriInput.ValidationErrors.Count > 0)
        {
            return;
        }

        if (SettingsStore.ServerUri.TrimEnd('/') == value.TrimEnd('/'))
        {
            return;
        }

        if (!Uri.TryCreate(value, UriKind.Absolute, out var serverUri))
        {
            Snackbar.Add("Invalid URI", Severity.Error);
            return;
        }

        SettingsStore.ServerUri = serverUri.ToString();
        Snackbar.Add("Server updated", Severity.Success);
        await DeviceCache.SetAllOffline();
        Dialogs.ShowMessageBox(
            "Restart Recommended",
            "Please restart the application soon for changes to fully take effect.")
            .Forget();
    }

    private string? ValidateLabel(string input)
    {
        if (string.IsNullOrEmpty(input))
        {
            return null;
        }

        if (input.Length > 25)
        {
            return "PublicKeyLabel must be 25 characters or less.";
        }

        if (AppConstants.PublicKeyLabelValidator().IsMatch(input))
        {
            return "PublicKeyLabel can only contain letters, numbers, underscores, hyphens, and at sign (@).";
        }

        return null;
    }

    private string? ValidateServerUri(string uri)
    {
        if (!Uri.TryCreate(uri, UriKind.Absolute, out var serverUri) ||
            !serverUri.IsHttp())
        {
            return "Invalid server URI.";
        }
        return null;
    }
}