@page "/logs"
@inject Microsoft.Maui.Storage.IFileSystem MauiFiles
@inject ControlR.Libraries.DevicesCommon.Services.IFileSystem FileIO
@inject ISnackbar Snackbar
@inject IDialogService Dialogs
@inject ILogger<Logs> Logger

<MudText Typo="Typo.h4" Color="Color.Primary" GutterBottom>
    Logs
</MudText>

<div style="display: grid; grid-template-rows: auto 1fr; row-gap: 10px">
    <div>
        <MudToolBar>
            <MudSpacer />
            <MudTooltip Text="Clear All">
                <MudIconButton Icon="@Icons.Material.Outlined.DeleteSweep" Color="Color.Error" OnClick="ClearLogs" />
            </MudTooltip>
            <MudTooltip Text="Copy">
                <MudIconButton Icon="@Icons.Material.Outlined.ContentCopy" OnClick="CopyLogContent" />
            </MudTooltip>
            <MudTooltip Text="Refresh">
                <MudIconButton Icon="@Icons.Material.Outlined.Refresh" OnClick="Refresh" />
            </MudTooltip>
        </MudToolBar>
    </div>

    <div class="content-grid">
        <div>
            <MudList Clickable="true"
                     @bind-SelectedItem="_selectedFileItem"
                     SelectedValue="_selectedFileValue"
                     SelectedValueChanged="OnSelectedValueChanged">
                <MudListSubheader>
                    Select Log File:
                </MudListSubheader>
                @foreach (var file in _logFiles)
                {
                    <MudListItem @key=(file.FullName)
                                 Text="@(Path.GetFileName(file.FullName))"
                                 Value="@(file)"></MudListItem>
                }
            </MudList>
        </div>
        <div style="overflow:hidden;">
            <MudPaper Outlined Elevation="1" Style="position: relative; white-space: pre; padding: 10px; overflow: scroll;">
                @_logContent
            </MudPaper>
        </div>
    </div>
</div>

@code {
    private readonly string _logsDir = Path.Combine(Microsoft.Maui.Storage.FileSystem.AppDataDirectory, "Logs");
    private FileInfo[] _logFiles = Array.Empty<FileInfo>();
    private MudListItem? _selectedFileItem;
    private object? _selectedFileValue;
    private string _logContent = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        LoadFileNames();
        _selectedFileValue = _logFiles.FirstOrDefault();
        await LoadSelectedFile();

        await base.OnInitializedAsync();
    }

    private async Task ClearLogs()
    {
        var result = await Dialogs.ShowMessageBox(
            "Confirm Deletion",
            "Are you sure you want to delete all logs?",
            "Yes",
            "Cancel");

        if (result != true)
        {
            return;
        }

        foreach (var file in FileIO.GetFiles(_logsDir))
        {
            try
            {
                FileIO.DeleteFile(file);
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "Error while deleting log file {name}.", Path.GetFileName(file));
            }
        }

        _selectedFileValue = null;
        _logContent = string.Empty;
        LoadFileNames();
    }

    private async Task CopyLogContent()
    {
        await Clipboard.SetTextAsync(_logContent);
        Snackbar.Add("Copied to clipboard", Severity.Success);
    }

    private void LoadFileNames()
    {
        _logFiles = FileIO.GetFiles(_logsDir)
            .Select(x => new FileInfo(x))
            .OrderByDescending(x => x.CreationTime)
            .ToArray();

    }

    private async Task LoadSelectedFile()
    {
        if (_selectedFileValue is FileInfo fileInfo &&
            fileInfo.Exists)
        {
            _logContent = await FileIO.ReadAllTextAsync(fileInfo.FullName);
        }
    }
    private async Task OnSelectedValueChanged(object item)
    {
        _selectedFileValue = item;
        await LoadSelectedFile();
    }

    private async Task Refresh()
    {
        LoadFileNames();
        await LoadSelectedFile();
        Snackbar.Add("Refreshed", Severity.Success);
    }
}
