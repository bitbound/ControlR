@using System.Diagnostics
@using System.Runtime.InteropServices
@using System.Text
@using System.Runtime.InteropServices.JavaScript;
@using ControlR.Viewer.Components.RemoteDisplayComponents;

<input @ref="_virtualKeyboard" 
    class="virtual-keyboard" 
    type="password" 
    autocomplete="off" 
    @bind-value="VirtualKeyboardText" 
    @bind-value:event="oninput"
    @onkeydown="OnVkKeyDown" />

<div class="display-wrapper @($"{_windowState}".ToLower())">
    <div class="title-bar p-2">
        <div style="align-self: center; margin-left: 10px;">
            <MudText Typo="Typo.h6" Color="MudBlazor.Color.Primary">
                @(Session?.Device?.Name)
            </MudText>
        </div>
        <div class="overflow-x-auto">
            @if (_windowState != WindowState.Minimized)
            {
                <div class="desktop-actions">
                    <ViewModeMenu ViewMode="_viewMode"
                                  OnViewModeSelected="@((viewMode) => _viewMode = viewMode)" />

                    <MonitorsMenu Displays="_displays" SelectedDisplay="_selectedDisplay" />

                    @if (Session.Device.Platform == SystemPlatform.Windows)
                    {
                        <MudButton Variant="Variant.Outlined" OnClick="InvokeCtrlAltDel">
                            Ctrl+Alt+Del
                        </MudButton>
                    }
                </div>

                <div class="mobile-actions">
                    
                    <MudTooltip Text="Actions">
                        <MudIconButton 
                            Icon="@(Icons.Material.Filled.MoreVert)" 
                            Color="Color.Info"
                            OnClick="@(() => _isMobileActionsMenuOpen = !_isMobileActionsMenuOpen)" />
                    </MudTooltip>

                    @if (_controlMode == ControlMode.Touch)
                    {
                        <MudIconButton Variant="Variant.Outlined" Icon="@(Icons.Material.Filled.Keyboard)" OnClick="InvokeKeyboard" />
                    }

                    <MudPopover Open="_isMobileActionsMenuOpen" Class="z9001" AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.TopCenter">
                        <MudList>
                            <MudListItem>
                                <ViewModeMenu ViewMode="_viewMode" OnViewModeSelected="@((viewMode) => _viewMode = viewMode)" />
                            </MudListItem>
                            <MudListItem>
                                <MonitorsMenu Displays="_displays" SelectedDisplay="_selectedDisplay" />
                            </MudListItem>
                            @if (Session.Device.Platform == SystemPlatform.Windows)
                            {
                                <MudListItem>
                                    <MudButton Variant="Variant.Outlined" OnClick="InvokeCtrlAltDel">
                                        Ctrl+Alt+Del
                                    </MudButton>
                                </MudListItem>
                            }
                            @if (_controlMode == ControlMode.Touch)
                            {
                                <MudListItem>
                                    <MudButton Variant="Variant.Outlined" StartIcon="@(Icons.Material.Filled.Keyboard)" OnClick="InvokeKeyboard">
                                        Keyboard
                                    </MudButton>
                                </MudListItem>
                            }
                        </MudList>
                    </MudPopover>
                </div>
            }
        </div>
        <div class="text-end" style="white-space: nowrap">
            @if (_windowState != WindowState.Minimized)
            {
                <MudTooltip Text="Minimize">
                    <MudIconButton Icon="@(Icons.Material.Filled.Minimize)"
                               Class="mr-2"
                               OnClick="@(() => SetWindowState(WindowState.Minimized))" />
                </MudTooltip>
            }

            @if (_windowState != WindowState.Restored)
            {
                <MudTooltip Text="Restore">
                    <MudIconButton Icon="@(Icons.Material.Filled.FullscreenExit)"
                               Class="mr-2"
                               OnClick="@(() => SetWindowState(WindowState.Restored))" />
                </MudTooltip>
            }

            @if (_windowState != WindowState.Maximized)
            {
                <MudTooltip Text="Maximize">
                    <MudIconButton Icon="@(Icons.Material.Filled.Fullscreen)"
                               Class="mr-2"
                               OnClick="@(() => SetWindowState(WindowState.Maximized))" />
                </MudTooltip>
            }

            <MudTooltip Text="Close">
                <MudIconButton Icon="@(Icons.Material.Filled.Close)"
                               OnClick="Close" />
            </MudTooltip>
        </div>
    </div>
    <div class="content-area"
        @ref="_contentArea"
        @ontouchstart="OnTouchStart"
        @ontouchmove="OnTouchMove"
        @ontouchcancel="OnTouchCancel"
        @ontouchend="OnTouchEnd">

        <video id="@_videoId"
               @ref="_videoRef"
               autoplay="autoplay"
               muted
               class="@($"{_viewMode.ToString().ToLower()} {_windowState.ToString().ToLower()} remote-screen")"
               style="@(VideoSizeCss) @(VideoDisplayCss)"/>

        @if (!string.IsNullOrWhiteSpace(_statusMessage))
        {
            <div class="text-center mt-10" style="position: absolute; width: 100%; height: 100%">
                <MudText Typo="Typo.h4" Color="MudBlazor.Color.Info" Align="Align.Center" GutterBottom>
                    @(_statusMessage)
                </MudText>

                @if (_statusProgress > 0)
                {
                    <MudProgressCircular Min="0" Max="1" Value="_statusProgress" Color="MudBlazor.Color.Info" Size="MudBlazor.Size.Large" />
                }
                else if (_statusProgress < 0)
                {
                    <MudProgressCircular Indeterminate Color="MudBlazor.Color.Info" Size="MudBlazor.Size.Large" />
                }

                @if (_isStreamReady && !_isStreamLoaded)
                {
                    <MudIconButton Icon="@(Icons.Material.Outlined.PlayCircle)" Size="Size.Large" />
                }
            </div>
        }
    </div>
</div>