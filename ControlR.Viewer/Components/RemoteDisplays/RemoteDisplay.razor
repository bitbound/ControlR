@inherits JsInteropableComponent
@using System.Diagnostics
@using System.Runtime.InteropServices
@using System.Text
@using System.Runtime.InteropServices.JavaScript;
@using ControlR.Viewer.Components.RemoteDisplays;

<input @ref="_virtualKeyboard"
       class="virtual-keyboard"
       type="text"
       autocomplete="off"
       autocapitalize="off"
       @onblur="HandleVirtualKeyboardBlurred"
       @bind-value="VirtualKeyboardText"
       @bind-value:event="oninput"
       @onkeydown="OnVkKeyDown" />

<div class="display-grid">
    <div class="action-bar pa-2">
        <ViewModeMenu ViewMode="_viewMode" OnViewModeSelected="@((viewMode) => _viewMode = viewMode)" />

        <DisplaysMenu Displays="_displays" SelectedDisplay="_selectedDisplay" OnDisplaySelected="ChangeDisplays" />

        <MudTooltip Text="Ctrl+Alt+Del" Placement="Placement.Right" Class="z9002">
            @if (CurrentBreakpoint < Breakpoint.Sm)
            {
                <MudIconButton Icon="@(Icons.Material.Filled.Shield)"
                               Variant="Variant.Outlined"
                               OnClick="InvokeCtrlAltDel" />
            }
            else
            {
                <MudButton Variant="Variant.Outlined" StartIcon="@(Icons.Material.Filled.Shield)" OnClick="InvokeCtrlAltDel">
                    Ctrl+Alt+Del
                </MudButton>
            }
        </MudTooltip>

        @if (_controlMode == ControlMode.Touch)
        {
            <MudDivider Vertical FlexItem />

            <MudTooltip Text="Virtual Keyboard" Placement="Placement.Right" Class="z9002">
                <MudToggleIconButton Variant="Variant.Outlined"
                                     Icon="@(Icons.Material.Filled.Keyboard)"
                                     ToggledColor="Color.Success"
                                     ToggledIcon="@(Icons.Material.Filled.Keyboard)"
                                     ToggledChanged="HandleKeyboardToggled" />
            </MudTooltip>

            <MudTooltip Text="Scroll Mode" Placement="Placement.Right" Class="z9002">
                <MudToggleIconButton Variant="Variant.Outlined"
                                     Icon="@(Icons.Material.Filled.UnfoldMoreDouble)"
                                     ToggledColor="Color.Success"
                                     ToggledIcon="@(Icons.Material.Filled.UnfoldMoreDouble)"
                                     ToggledChanged="HandleScrollModeToggled" />
            </MudTooltip>
        }
    </div>
    <div class="screen-area"
         @ref="_screenArea"
         @ontouchstart="OnTouchStart"
         @ontouchmove="OnTouchMove"
         @ontouchcancel="OnTouchCancel"
         @ontouchend="OnTouchEnd">

        <canvas id="@_canvasId"
                @ref="_canvasRef"
                width="@(_selectedDisplay?.Width ?? 0)"
                height="@(_selectedDisplay?.Height ?? 0)"
                class='@($"remote-screen {CanvasClasses}")'
                style="@(CanvasStyle)" />

        @if (!string.IsNullOrWhiteSpace(_statusMessage))
        {
            <div class="text-center message-wrapper">
                <MudText Typo="Typo.h4" Color="MudBlazor.Color.Info" Align="Align.Center" GutterBottom Class="mt-5">
                    @(_statusMessage)
                </MudText>

                @if (_statusProgress > 0)
                {
                    <MudProgressCircular Min="0" Max="1" Value="_statusProgress" Color="MudBlazor.Color.Info" Size="MudBlazor.Size.Large" />
                }
                else if (_statusProgress < 0)
                {
                    <MudProgressCircular Indeterminate Color="MudBlazor.Color.Info" Size="MudBlazor.Size.Large" />
                }
            </div>
        }
    </div>
</div>