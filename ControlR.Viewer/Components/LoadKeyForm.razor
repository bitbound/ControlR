@using System.Security.Cryptography
@inject IAppState AppState
@inject ISettings Settings
@inject ISnackbar Snackbar
@inject IMessenger Messenger
@inject IKeyApi KeyApi
@inject IKeyProvider KeyProvider
@inject IHttpConfigurer HttpConfigurer
@inject ILogger<LoadKeyForm> Logger


@if (!_isInitialized)
{
    <div class="text-center mt-4">
        <MudText Typo="Typo.h4" Color="Color.Primary" GutterBottom>
            Loading
        </MudText>
        <MudProgressCircular Indeterminate="true" Size="Size.Large" Color="Color.Info" />
    </div>
}
else
{
    <MudGrid Justify="Justify.Center">
        <MudItem>
            <MudPaper MinWidth="350px" MaxWidth="600px">

                <MudForm @ref="_loginForm" @bind-IsValid="@_formIsValid">
                    <MudCard>
                        <MudCardHeader Class="d-block">
                            <MudText Typo="Typo.h5" Color="Color.Primary" GutterBottom>
                             Decrypt Private Key
                         </MudText>
                         <MudText>
                             You must decrypt your locally-stored private key
                             before you can make any requests to the server.
                         </MudText>
                     </MudCardHeader>
                     <MudCardContent>
                         <MudTextField T="string"
                                       @bind-Value="_passphrase"
                                       Label="Passphrase"
                                       HelperText="Enter your PIN or password."
                                       Immediate="true"
                                       InputType="InputType.Password"
                                       OnKeyDown="PassphraseInputKeyDown"
                                            Required />

                             <MudCheckBox @bind-Checked="RememberPassphrase"
                                          Label="Remember on this device" />
                         </MudCardContent>
                         <MudCardActions Class="justify-end">
                             <MudButton ButtonType="ButtonType.Button"
                                        Variant="Variant.Filled"
                                        Color="Color.Primary"
                                        Disabled="!_formIsValid || _requestPending"
                                        OnClick="SubmitButtonClicked">
                                 Submit
                             </MudButton>
                         </MudCardActions>
                     </MudCard>
                 </MudForm>

             </MudPaper>
         </MudItem>
     </MudGrid>

}


@code {
    private string? _passphrase;
    private MudForm? _loginForm;
    private bool _formIsValid;
    private bool _requestPending;
    private bool _isInitialized;

    private bool RememberPassphrase
    {
        get => Settings.RememberPassphrase;
        set => Settings.RememberPassphrase = value;
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        try
        {
            if (Settings.RememberPassphrase)
            {
                _passphrase = await Settings.GetPassphrase();

                if (string.IsNullOrWhiteSpace(_passphrase))
                {
                    Snackbar.Add("Stored passphrase is empty", Severity.Warning);
                    return;
                }

                _formIsValid = true;
                await LoadKeys(false);
            }

            _isInitialized = true;
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error while initializing settings.");
            Snackbar.Add("Failed to retrieve current settings", Severity.Error);
            await Settings.Clear();
        }

    }

    private async Task PassphraseInputKeyDown(KeyboardEventArgs args)
    {
        if (args.Key == "Enter")
        {
            await LoadKeys(true);
        }
    }

    private async Task SubmitButtonClicked(MouseEventArgs args)
    {
        await LoadKeys(true);
    }

    private async Task LoadKeys(bool showDecryptionToast)
    {
        if (!_formIsValid || string.IsNullOrWhiteSpace(_passphrase))
        {
            return;
        }

        _requestPending = true;

        using var counter = AppState.IncrementBusyCounter(() =>
        {
            _requestPending = false;
            InvokeAsync(StateHasChanged);
        });

        var encryptedPrivateKey = await Settings.GetEncryptedPrivateKey();

        try
        {
            var userKeys = KeyProvider.ImportKeys(_passphrase, encryptedPrivateKey);
            AppState.SetUserKeys(userKeys);

            var keyDto = new IdentityDto()
                {
                    PublicKey = userKeys.PublicKey,
                    Username = Settings.Username
                };
            HttpConfigurer.UpdateClientAuthorizations(keyDto);

            var verifyResult = await KeyApi.VerifyKeys();
            if (verifyResult.IsSuccess)
            {
                if (RememberPassphrase)
                {
                    await Settings.SetPassphrase(_passphrase);
                }

                if (showDecryptionToast)
                {
                    Snackbar.Add("Private key decrypted", Severity.Success);
                }

                AppState.KeysVerified = true;
                Messenger.SendGenericMessage(GenericMessageKind.AuthStateChanged);
            }
            else
            {
                Snackbar.Add("Verification with server failed", Severity.Error);
            }
        }
        catch (CryptographicException ex) when (ex.Message.Contains("password may be incorrect"))
        {
            Logger.LogWarning(ex, "Failed to decrypt private key.");
            Snackbar.Add("Passphrase is incorrect", Severity.Error);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error while loading user keys.");
            Snackbar.Add("An error occurred", Severity.Error);
        }
    }
}
