@using System.Security.Cryptography
@inject IAppState AppState
@inject ISettings Settings
@inject ISnackbar Snackbar
@inject IHttpConfigurer HttpConfigurer
@inject IDialogService Dialogs
@inject IFilePicker FilePicker
@inject IKeyApi KeyApi
@inject IMessenger Messenger
@inject IKeyProvider KeyProvider
@inject IClipboardManager ClipboardManager
@inject ILogger<KeyCreatorForm> Logger

@if (_isLoading)
{
    <div class="text-center mt-8">
        <MudText Typo="Typo.h4" Color="Color.Info" GutterBottom>
            Loading
        </MudText>
        <MudProgressCircular Min="0" Max="1" Indeterminate Color="MudBlazor.Color.Info" Size="MudBlazor.Size.Large" />
    </div>
}
else if (AppState.UserKeysPresent && !AppState.KeysVerified)
{
    <div class="text-center mt-8">
        <MudText Typo="Typo.h5" Color="Color.Warning" Class="mb-8">
            Failed to verify stored keys.
        </MudText>
        <div>
            <MudButton ButtonType="ButtonType.Button"
                       Variant="Variant.Filled"
                       Color="Color.Primary"
                       Size="Size.Large"
                       Class="mb-4"
                       OnClick="HandleRetryLoadClicked">
                Retry
            </MudButton>
        </div>

        <div>
            <MudButton ButtonType="ButtonType.Button"
                       Variant="Variant.Filled"
                       Color="Color.Error"
                       Size="Size.Large"
                       OnClick="HandleResetKeysClicked">
                Reset Keys
            </MudButton>
        </div>
    </div>
}
else
{
    <MudGrid Justify="Justify.Center">
        <MudItem>
            <MudPaper MinWidth="350px" MaxWidth="600px">
                <MudCard>
                    <MudCardHeader Class="d-block text-center">
                        <MudText Typo="Typo.h3" Color="Color.Primary">
                            Welcome
                        </MudText>
                    </MudCardHeader>

                    <MudCardContent Class="pt-0 px-8">
                        <MudText Class="mb-4">
                            Start by creating or importing a public/private keypair.  The private key
                            never leaves your device and is stored in Microsoft's platform-specific
                            secure storage implementation.  It is used to sign outgoing messages.
                        </MudText>
                        <MudText Class="mb-4">
                            Remote devices independently verify all messages they receive.  They do
                            not implicitly trust the server's authentication of users. Devices will
                            only respond to messages that are signed by private keys associated with
                            the public keys that the device trusts.
                        </MudText>
                        <MudText>
                            No data about keys, users, or devices is stored on the server.
                        </MudText>
                    </MudCardContent>

                    <MudCardActions Class="d-block text-center">
                        @if (_isVerifyingKeys)
                        {
                            <div>
                                <MudText Typo="Typo.h4" Color="Color.Info" GutterBottom>
                                    Verifying keys
                                </MudText>
                                <MudProgressCircular Min="0" Max="1" Indeterminate Color="MudBlazor.Color.Info" Size="MudBlazor.Size.Large" />
                            </div>
                        }
                        else
                        {
                            <MudText Color="Color.Info" GutterBottom>
                                Generate a new keypair.
                            </MudText>
                            <div class="mb-6">
                                <MudButton ButtonType="ButtonType.Button"
                                           Variant="Variant.Filled"
                                           Color="Color.Primary"
                                           Disabled="_isVerifyingKeys"
                                           Size="Size.Large"
                                           OnClick="CreateButtonClicked">
                                    Create
                                </MudButton>
                            </div>

                            <MudText Color="Color.Info" GutterBottom>
                                Import an encrypted private key from disk.
                            </MudText>
                            <div class="mb-6">
                                <MudButton ButtonType="ButtonType.Button"
                                           Variant="Variant.Filled"
                                           Color="Color.Default"
                                           Size="Size.Large"
                                           OnClick="ImportButtonClicked">
                                    Import
                                </MudButton>
                            </div>

                            <MudText Color="Color.Info" GutterBottom>
                                Import a base64 private key from the clipboard.
                            </MudText>
                            <div>
                                <MudButton ButtonType="ButtonType.Button"
                                           Variant="Variant.Filled"
                                           Color="Color.Default"
                                           Size="Size.Large"
                                           OnClick="PasteButtonClicked">
                                    Paste
                                </MudButton>
                            </div>
                        }
                    </MudCardActions>
                </MudCard>
            </MudPaper>
        </MudItem>
    </MudGrid>
}

@code {
    private bool _isVerifyingKeys;
    private bool _isLoading = true;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {
            try
            {
                var storedKey = await Settings.GetSecurePrivateKey();
                if (storedKey.IsSuccess)
                {
                    var keypair = KeyProvider.ImportPrivateKey(storedKey.Value);

                    _ = await VerifyKeys(keypair, false);
                }
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "Error while importing private key on initialization.");
            }
            finally
            {
                _isLoading = false;
                await InvokeAsync(StateHasChanged);
            }
        }
    }
    private async Task CreateButtonClicked(MouseEventArgs args)
    {
        try
        {
            _isVerifyingKeys = true;
            using var _ = AppState.IncrementBusyCounter(() =>
            {
                _isVerifyingKeys = false;
                InvokeAsync(StateHasChanged);
            });

            var keypair = KeyProvider.GenerateKeys();

            if (!await VerifyKeys(keypair, true))
            {
                return;
            }

            Snackbar.Add("Keypair created", Severity.Success);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error while creating keypair.");
            Snackbar.Add("Failed to create keypair", Severity.Error);
        }
    }

    private async Task HandleResetKeysClicked()
    {
        var result = await Dialogs.ShowMessageBox(
            "Confirm Reset",
            "Are you sure you want to delete your keys and reset the app?  This cannot be undone.",
            "Remove",
            "Cancel");

        if (result == true)
        {
            await Settings.Reset();
        }
    }

    private async Task HandleRetryLoadClicked()
    {
        _isLoading = true;
        await VerifyKeys(AppState.UserKeys, true);
        _isLoading = false;
    }


    private async Task ImportButtonClicked(MouseEventArgs args)
    {
        var fileType = new FilePickerFileType(new Dictionary<DevicePlatform, IEnumerable<string>>()
            {
                [DevicePlatform.Android] = new[] { "*/*" },
                [DevicePlatform.WinUI] = new[] { ".crkeys" }
            });

        var pickOptions = new PickOptions()
            {
                PickerTitle = "Import ControlR Keys",
                FileTypes = fileType
            };

        var result = await FilePicker.PickAsync(pickOptions);

        if (result is null)
        {
            return;
        }

        try
        {
            var parameters = new DialogParameters();
            parameters.Add(nameof(PassphrasePromptDialog.Title), "Decrypt Private Key");
            parameters.Add(
                nameof(PassphrasePromptDialog.Subtitle),
                "Enter your passphrase to decrypt your private key.  It will be stored in MAUI's ISecureStorage implementation.");

            var dialogRef = await Dialogs.ShowAsync<PassphrasePromptDialog>("Decrypt Private Key", parameters);
            var dialogResult = await dialogRef.Result;
            if (dialogResult.Canceled || dialogResult.Data is not string passphrase)
            {
                return;
            }

            using var cts = new CancellationTokenSource(5_000);
            using var fs = await result.OpenReadAsync();
            var encryptedPrivateKey = new byte[fs.Length];
            await fs.ReadAsync(encryptedPrivateKey, cts.Token);

            var keypair = KeyProvider.ImportPrivateKey(passphrase, encryptedPrivateKey);

            if (!await VerifyKeys(keypair, true))
            {
                return;
            }

            Snackbar.Add("Keys imported successfully.", Severity.Success);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error while importing keys.");
            Snackbar.Add("Failed to import keys", Severity.Error);
        }
    }

    private async Task PasteButtonClicked(MouseEventArgs args)
    {
        try
        {
            var base64 = await ClipboardManager.GetText();
            if (string.IsNullOrWhiteSpace(base64))
            {
                Snackbar.Add("Clipboard is empty.", Severity.Warning);
                return;
            }

            var privateKey = Convert.FromBase64String(base64.Trim());
            var keypair = KeyProvider.ImportPrivateKey(privateKey);

            if (!await VerifyKeys(keypair, true))
            {
                return;
            }

            Snackbar.Add("Keys imported successfully.", Severity.Success);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error while importing keys.");
            Snackbar.Add("Failed to import keys", Severity.Error);
        }
    }

    private async Task<bool> VerifyKeys(UserKeyPair keypair, bool showVerificationToast)
    {
        _isVerifyingKeys = true;
        await InvokeAsync(StateHasChanged);

        using var counter = AppState.IncrementBusyCounter(() =>
        {
            _isVerifyingKeys = false;
            InvokeAsync(StateHasChanged);
        });

        try
        {
            await AppState.UpdateKeypair(keypair);

            var keyDto = new IdentityDto()
                {
                    Username = Settings.Username
                };
            HttpConfigurer.UpdateClientAuthorizations(keyDto);

            var verifyResult = await KeyApi.VerifyKeys();
            if (verifyResult.IsSuccess)
            {
                await Settings.StoreSecurePrivateKey(keypair.PrivateKey);
                if (showVerificationToast)
                {
                    Snackbar.Add("Private key decrypted", Severity.Success);
                }

                AppState.KeysVerified = true;
                await Messenger.SendGenericMessage(GenericMessageKind.KeysStateChanged);
                return true;
            }
            else if (verifyResult.HadException)
            {
                Snackbar.Add($"A connection error occurred: {verifyResult.Reason}", Severity.Error);
            }
            else
            {
                Snackbar.Add("Verification with server failed", Severity.Error);
            }
        }
        catch (CryptographicException ex) when (ex.Message.Contains("password may be incorrect"))
        {
            Logger.LogWarning(ex, "Failed to decrypt private key.");
            Snackbar.Add("Passphrase is incorrect", Severity.Error);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error while loading user keys.");
            Snackbar.Add("An error occurred", Severity.Error);
        }
        return false;
    }

}
