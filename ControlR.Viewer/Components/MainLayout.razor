@using Microsoft.AspNetCore.SignalR.Client;
@using ControlR.Libraries.DevicesCommon.Extensions;
@using ControlR.Libraries.DevicesCommon.Messages;
@using ControlR.Libraries.Shared.Enums;
@using ControlR.Libraries.Shared.Dtos;
@inherits LayoutComponentBase
@inject IMessenger Messenger
@inject IAppState AppState
@inject IViewerHubConnection ViewerHub
@inject IStoreIntegration StoreIntegration
@inject ILauncher Launcher
@inject ISnackbar Snackbar
@inject IUpdateManager UpdateManager
@inject ILogger<MainLayout> Logger
@inject NavigationManager NavManager

<!-- This div has to be here in order for ::deep selector to work on child components. -->
<div>
    <MudThemeProvider IsDarkMode />
    <MudDialogProvider />
    <MudSnackbarProvider />

    <MudLayout>
        <MudAppBar Elevation="0">
            <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start"
                OnClick="@((e) => DrawerToggle())" />
            <MudSpacer />

            @if (_updateAvailable)
            {
                <MudTooltip Text="Update Available">
                    <MudBadge Content='"!"' Color="Color.Warning" Overlap="true" Bordered="true" BadgeClass="update-badge">
                        <MudIconButton Color="Color.Info" Icon="@(Icons.Material.Filled.SystemUpdateAlt)"
                            OnClick="InstallUpdate" />
                    </MudBadge>

                </MudTooltip>
            }
            @if (AppState.IsBusy && ViewerHub.ConnectionState == HubConnectionState.Connected)
            {
                <MudTooltip Text="@($"{AppState.PendingOperations} operation(s) pending")">
                    <MudProgressCircular Indeterminate StrokeWidth="6" Size="Size.Small" Color="Color.Success"
                        Class="mx-3 mt-1" />
                </MudTooltip>
            }
            else
            {
                switch (ViewerHub.ConnectionState)
                {
                    case HubConnectionState.Connected:
                        <MudTooltip Text="Connected">
                            <MudIcon Color="Color.Success" Icon="@(Icons.Material.Filled.Bolt)" Class="mx-3 mt-1" />
                        </MudTooltip>
                        break;
                    case HubConnectionState.Connecting or HubConnectionState.Reconnecting:
                        <MudTooltip Text="Reconnecting">
                            <MudProgressCircular Indeterminate StrokeWidth="6" Size="Size.Small" Color="Color.Warning"
                                Class="mx-3 mt-1" />
                        </MudTooltip>
                        break;
                    case HubConnectionState.Disconnected:
                        <MudTooltip Text="Disconnected">
                            <MudIcon Color="Color.Error" Icon="@(Icons.Material.Filled.OfflineBolt)" Class="mx-3 mt-1" />
                        </MudTooltip>
                        break;
                    default:
                        break;
                }
            }
            <MudTooltip Text="GitHub">
                <MudIconButton Icon="@Icons.Custom.Brands.GitHub" Color="Color.Inherit"
                    Href="https://github.com/bitbound/controlr/" Target="_blank" />
            </MudTooltip>
        </MudAppBar>
        <MudDrawer @bind-Open="_drawerOpen" Elevation="1">
            <MudDrawerHeader>
                <MudImage Src="/assets/appicon.png" Height="30" Style="margin-right: 10px;" />
                <MudText Typo="Typo.h6" Color="Color.Primary">ControlR</MudText>
            </MudDrawerHeader>
            <NavMenu />
        </MudDrawer>
        <MudMainContent>
            <div>
                @if (_showAlert)
                {
                    <MudAlert Severity="_alertSeverity.ToMudSeverity()" ShowCloseIcon="true" CloseIconClicked="CloseAlert">
                        @(_alertMessage)
                    </MudAlert>
                }
            </div>
            <MudContainer MaxWidth="MaxWidth.ExtraExtraLarge" Class="my-4 pt-4">
                @Body
            </MudContainer>
        </MudMainContent>
    </MudLayout>

    <DeviceContentHarness />
</div>

@code {
    private bool _drawerOpen = true;
    private bool _showAlert = false;
    private AlertSeverity _alertSeverity = AlertSeverity.Information;
    private string _alertMessage = string.Empty;
    private bool _updateAvailable;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        Messenger.RegisterGenericMessage(this, HandleGeneric);
        Messenger.Register<ToastMessage>(this, HandleToastMessage);
        Messenger.Register<AlertBroadcastDto>(this, HandleAlertBroadcast);
        Messenger.Register<HubConnectionStateChangedMessage>(this, HandleHubConnectionStateChanged);
    }

    private void CloseAlert()
    {
        _showAlert = false;
    }

    private void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    private async Task HandleAlertBroadcast(object subscriber, AlertBroadcastDto alert)
    {
        _alertMessage = alert.Message;
        _alertSeverity = alert.Severity;
        _showAlert = true;
        await InvokeAsync(StateHasChanged);
    }

    private async Task HandleGeneric(object subscriber, GenericMessageKind kind)
    {
        switch (kind)
        {
            case GenericMessageKind.KeysStateChanged:
            case GenericMessageKind.PendingOperationsChanged:
                await InvokeAsync(StateHasChanged);
                break;
            default:
                return;
        }
    }

    private async Task HandleHubConnectionStateChanged(object subscriber, HubConnectionStateChangedMessage message)
    {
        if (AppState.IsAuthenticated && ViewerHub.IsConnected)
        {
            UpdateManager
                .CheckForUpdate()
                .ContinueWith(async x =>
                {
                    var result = await x;
                    if (result.IsSuccess)
                    {
                        _updateAvailable = result.Value;
                        await InvokeAsync(StateHasChanged);
                    }
                })
                .Forget();
        }
        await InvokeAsync(StateHasChanged);
    }

    private Task HandleToastMessage(object subscriber, ToastMessage toast)
    {
        Snackbar.Add(toast.Message, toast.Severity);
        return Task.CompletedTask;
    }

    private async Task InstallUpdate()
    {
        try
        {
            Snackbar.Add("Downloading update", Severity.Info);
            var installResult = await UpdateManager.InstallCurrentVersion();
            if (!installResult.IsSuccess)
            {
                Snackbar.Add(installResult.Reason, Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error while installing update.");
            Snackbar.Add("Failed to install update", Severity.Error);
        }
    }
}