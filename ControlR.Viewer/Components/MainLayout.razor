@using Microsoft.AspNetCore.SignalR.Client;
@inherits LayoutComponentBase
@inject IMessenger Messenger
@inject IAppState AppState
@inject IViewerHubConnection ViewerHub
@inject ISnackbar Snackbar
@inject IUpdateManager UpdateManager
@inject NavigationManager NavManager

<!-- This div has to be here in order for ::deep selector to work on child components. -->
<div>
    <MudThemeProvider IsDarkMode />
    <MudDialogProvider />
    <MudSnackbarProvider />

     <MudLayout>
         <MudAppBar Elevation="0">
             <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
             <MudSpacer />

             @if (_updateAvailable)
            {
                <MudTooltip Text="Update Available">
                    <MudBadge Content="@("!")" Color="Color.Warning" Overlap="true" Bordered="true" BadgeClass="update-badge">
                        <MudIconButton Color="Color.Info"
                                       Icon="@(Icons.Material.Filled.SystemUpdateAlt)"
                                       OnClick="InstallUpdate" />
                    </MudBadge>

                </MudTooltip>
            }
            @if (AppState.IsBusy)
            {
                <MudTooltip Text="@($"{AppState.PendingOperations} operation(s) pending")">
                    <MudProgressCircular Indeterminate StrokeWidth="6" Size="Size.Small" Color="Color.Success" Class="mx-3 mt-1" />
                 </MudTooltip>
            }
            else
            {
                switch (ViewerHub.ConnectionState)
                {
                    case HubConnectionState.Connected:
                        <MudTooltip Text="Connected">
                            <MudIcon Color="Color.Success" Icon="@(Icons.Material.Filled.Bolt)" Class="mx-3 mt-1" />
                        </MudTooltip>
                        break;
                    case HubConnectionState.Connecting or HubConnectionState.Reconnecting:
                        <MudTooltip Text="Reconnecting">
                            <MudProgressCircular Indeterminate StrokeWidth="6" Size="Size.Small" Color="Color.Warning" Class="mx-3 mt-1" />
                         </MudTooltip>
                        break;
                    case HubConnectionState.Disconnected:
                        <MudTooltip Text="Disconnected">
                            <MudIcon Color="Color.Error" Icon="@(Icons.Material.Filled.OfflineBolt)" Class="mx-3 mt-1" />
                        </MudTooltip>
                        break;
                    default:
                        break;
                }
            }
            <MudTooltip Text="Website">
                <MudIconButton Icon="@(Icons.Material.Filled.WebAsset)" Color="Color.Inherit" Href="https://controlr.app/" Target="_blank" />
            </MudTooltip>
            <MudTooltip Text="GitHub">
                <MudIconButton Icon="@Icons.Custom.Brands.GitHub" Color="Color.Inherit" Href="https://github.com/bitbound/controlr/" Target="_blank" />
            </MudTooltip>
        </MudAppBar>
        <MudDrawer @bind-Open="_drawerOpen" Elevation="1">
            <MudDrawerHeader>
                <MudImage Src="/assets/appicon.png" Height="30" Style="margin-right: 10px;" />
                <MudText Typo="Typo.h6" Color="Color.Primary">ControlR</MudText>
            </MudDrawerHeader>
            <NavMenu />
        </MudDrawer>
        <MudMainContent>
            <div>
                @if (_showAlert)
                {
                    <MudAlert Severity="Severity.Warning" ShowCloseIcon="true" CloseIconClicked="CloseAlert">
                        @(_alertMessage)
                     </MudAlert>
                }
            </div>
            <MudContainer MaxWidth="MaxWidth.ExtraExtraLarge" Class="my-4 pt-4">
                @Body
            </MudContainer>
        </MudMainContent>
    </MudLayout>

    <DeviceContentHarness />
</div>

@code {
    private bool _drawerOpen = true;
    private bool _showAlert = false;
    private Severity _alertSeverity = Severity.Normal;
    private string _alertMessage = string.Empty;
    private bool _updateAvailable;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        Messenger.RegisterGenericMessage(this, HandleGeneric);
        Messenger.Register<ToastMessage>(this, HandleToastMessage);
    }

    private void CloseAlert()
    {
        _showAlert = false;
    }

    private void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    private async Task HandleGeneric(object subscriber, GenericMessageKind kind)
    {
        switch (kind)
        {
            case GenericMessageKind.AuthStateChanged:
                if (AppState.IsAuthenticated)
                {
                    var result = await UpdateManager.CheckForUpdate();
                    if (result.IsSuccess)
                    {
                        _updateAvailable = result.Value;
                    }
                }
                break;
            case GenericMessageKind.PendingOperationsChanged:
            case GenericMessageKind.HubConnectionStateChanged:
                await InvokeAsync(StateHasChanged);
                break;
            case GenericMessageKind.AppUpdateAvailable:
                _updateAvailable = true;
                await InvokeAsync(StateHasChanged);
                break;
            default:
                break;
        }
    }

    private Task HandleToastMessage(object subscriber, ToastMessage toast)
    {
        Snackbar.Add(toast.Message, toast.Severity);
        return Task.CompletedTask;
    }

    private async Task InstallUpdate()
    {
        Snackbar.Add("Downloading and installing update", Severity.Info);
        var installResult = await UpdateManager.InstallCurrentVersion();
        if (!installResult.IsSuccess)
        {
            Snackbar.Add(installResult.Reason, Severity.Error);
        }
        else
        {
            Snackbar.Add("Download successful", Severity.Success);
        }
    }
}