@page "/Account/LoginWith2fa"

@inject SignInManager<AppUser> SignInManager
@inject UserManager<AppUser> UserManager
@inject IdentityRedirectManager RedirectManager
@inject ILogger<LoginWith2fa> Logger

<PageTitle>Two-factor authentication</PageTitle>

<MudText Typo="Typo.h3" GutterBottom>
  Two-factor authentication
</MudText>

<MudDivider Class="mb-2" />

<StatusMessage Message="@_message" />

<MudText Typo="Typo.body1" GutterBottom Class="mb-3">
  Your login is protected with an authenticator app. Enter your authenticator code below.
</MudText>

<MudGrid>
  <MudItem xs=12 sm="6">
    <EditForm Model="Input" FormName="login-with-2fa" OnValidSubmit="OnValidSubmitAsync" method="post">
      <input type="hidden" name="ReturnUrl" value="@ReturnUrl" />
      <input type="hidden" name="RememberMe" value="@RememberMe" />
      <DataAnnotationsValidator />
      <ValidationSummary class="validation-error" role="alert" />
      <div class="mb-3">
        <MudStaticTextField @bind-Value="Input.TwoFactorCode" Label="Authenticator Code" />
        <ValidationMessage For="() => Input.TwoFactorCode" class="validation-error" />
      </div>
      <div class="mb-3">
        <MudStaticCheckBox @bind-Value="Input.RememberMachine">
          Remember this machine
        </MudStaticCheckBox>
      </div>
      <div>
        <MudStaticButton Color="Color.Primary" Size="Size.Large" Variant="Variant.Outlined">
          Log in
        </MudStaticButton>
      </div>
    </EditForm>
  </MudItem>
</MudGrid>

<MudText Class="mt-4">
  Don't have access to your authenticator device? You can
  <a class="mud-link mud-primary-text mud-link-underline-hover" href="Account/LoginWithRecoveryCode?ReturnUrl=@ReturnUrl">log in with a recovery code</a>.
</MudText>

@code {
  private string? _message;
  private AppUser _user = default!;

  [SupplyParameterFromForm]
  private InputModel Input { get; set; } = new();

  [SupplyParameterFromQuery]
  private string? ReturnUrl { get; set; }

  [SupplyParameterFromQuery]
  private bool RememberMe { get; set; }

  protected override async Task OnInitializedAsync()
  {
    // Ensure the user has gone through the username & password screen first
    _user = await SignInManager.GetTwoFactorAuthenticationUserAsync() ??
            throw new InvalidOperationException("Unable to load two-factor authentication user.");
  }

  private async Task OnValidSubmitAsync()
  {
    var authenticatorCode = Input.TwoFactorCode!.Replace(" ", string.Empty).Replace("-", string.Empty);
    var result = await SignInManager.TwoFactorAuthenticatorSignInAsync(authenticatorCode, RememberMe, Input.RememberMachine);
    var userId = await UserManager.GetUserIdAsync(_user);

    if (result.Succeeded)
    {
      Logger.LogInformation("User with ID '{UserId}' logged in with 2fa.", userId);
      RedirectManager.RedirectTo(ReturnUrl);
    }
    else if (result.IsLockedOut)
    {
      Logger.LogWarning("User with ID '{UserId}' account locked out.", userId);
      RedirectManager.RedirectTo("Account/Lockout");
    }
    else
    {
      Logger.LogWarning("Invalid authenticator code entered for user with ID '{UserId}'.", userId);
      _message = "Error: Invalid authenticator code.";
    }
  }

  private sealed class InputModel
  {
    [Required]
    [StringLength(7, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
    [DataType(DataType.Text)]
    [Display(Name = "Authenticator code")]
    public string? TwoFactorCode { get; set; }

    [Display(Name = "Remember this machine")]
    public bool RememberMachine { get; set; }
  }

}