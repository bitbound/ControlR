@page "/Account/Register"
@using ControlR.Web.Server.Services.Users

@inject UserManager<AppUser> UserManager
@inject SignInManager<AppUser> SignInManager
@inject IUserCreator UserCreator
@inject ILogger<Register> Logger
@inject IdentityRedirectManager RedirectManager
@inject IUserRegistrationProvider UserRegistrationProvider

<PageTitle>Register</PageTitle>

<MudText Typo="Typo.h3" GutterBottom="true">Register</MudText>

<MudGrid>
  <MudItem md="6">
    <StatusMessage Message="@Message"/>
    <EditForm Model="Input" asp-route-returnUrl="@ReturnUrl" method="post" OnValidSubmit="RegisterUser" FormName="register">
      <DataAnnotationsValidator/>

      <MudText Typo="Typo.body1" Color="Color.Primary" GutterBottom="true">
        Create a new account.
      </MudText>

      <MudGrid>
        <MudItem xs="12">
          <MudStaticTextField For="@(() => Input.Email)" @bind-Value="Input.Email"
                              Label="Email" Placeholder="name@example.com"
                              UserAttributes="@(new Dictionary<string, object?> { { "autocomplete", "true" }, { "aria-required", "true" } })"/>
        </MudItem>
        <MudItem xs="12">
          <MudStaticTextField For="@(() => Input.Password)" @bind-Value="Input.Password"
                              Label="Password" InputType="InputType.Password" Placeholder="password"
                              UserAttributes="@(new Dictionary<string, object?> { { "autocomplete", "new-password" }, { "aria-required", "true" } })"/>
        </MudItem>
        <MudItem xs="12">
          <MudStaticTextField For="@(() => Input.ConfirmPassword)" @bind-Value="Input.ConfirmPassword"
                              Label="Confirm Password" InputType="InputType.Password" Placeholder="confirm password"
                              UserAttributes="@(new Dictionary<string, object?> { { "autocomplete", "new-password" }, { "aria-required", "true" } })"/>
        </MudItem>
        <MudItem xs="12">
          <MudStaticButton Variant="Variant.Filled" Color="Color.Primary" FullWidth="true" FormAction="FormAction.Submit">Register</MudStaticButton>
        </MudItem>
      </MudGrid>
    </EditForm>
  </MudItem>
  <MudItem md="6">
    <MudText Typo="Typo.body1" Color="Color.Secondary" GutterBottom="true">
      Register using an external provider.
    </MudText>
    <ExternalLoginPicker/>
  </MudItem>
</MudGrid>

@* ReSharper disable once UnassignedGetOnlyAutoProperty *@

@code {
  private IEnumerable<IdentityError>? _identityErrors;

  [SupplyParameterFromForm]
  private InputModel Input { get; set; } = new();

  [SupplyParameterFromQuery]
  private string? ReturnUrl { get; set; }

  private string? Message => _identityErrors is null
    ? null
    : $"Error: {string.Join(", ", _identityErrors.Select(error => error.Description))}";

  public async Task RegisterUser(EditContext editContext)
  {
    if (!await UserRegistrationProvider.IsSelfRegistrationEnabled())
    {
      Logger.LogCritical("Self-registration attempted while self-registration is disabled.  Email: {Email}", Input.Email);
      return;
    }

    var createResult = await UserCreator.CreateUser(Input.Email, Input.Password, ReturnUrl);
    if (!createResult.Succeeded)
    {
      _identityErrors = createResult.IdentityResult.Errors;
      return;
    }

    if (UserManager.Options.SignIn.RequireConfirmedAccount)
    {
      RedirectManager.RedirectTo(
        "Account/RegisterConfirmation",
        new Dictionary<string, object?> { ["email"] = Input.Email, ["returnUrl"] = ReturnUrl });
    }

    await SignInManager.SignInAsync(createResult.User, false);
    RedirectManager.RedirectTo(ReturnUrl);
  }

  protected override async Task OnInitializedAsync()
  {
    if (!await UserRegistrationProvider.IsSelfRegistrationEnabled())
    {
      RedirectManager.RedirectTo("/");
      return;
    }

    await base.OnInitializedAsync();
  }

  private sealed class InputModel
  {
    [Required]
    [EmailAddress]
    [Display(Name = "Email")]
    public string Email { get; set; } = "";

    [Required]
    [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
    [DataType(DataType.Password)]
    [Display(Name = "Password")]
    public string Password { get; set; } = "";

    [DataType(DataType.Password)]
    [Display(Name = "Confirm password")]
    [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
    public string ConfirmPassword { get; set; } = "";
  }

}