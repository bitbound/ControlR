@page "/Account/Register"
@using Microsoft.EntityFrameworkCore

@inject UserManager<AppUser> UserManager
@inject IUserStore<AppUser> UserStore
@inject SignInManager<AppUser> SignInManager
@inject IEmailSender<AppUser> EmailSender
@inject ILogger<Register> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject IUserRegistrationProvider UserRegistrationProvider

<PageTitle>Register</PageTitle>

<MudText Typo="Typo.h3" GutterBottom="true">Register</MudText>

<MudGrid>
  <MudItem md="6">
    <StatusMessage Message="@Message"/>
    <EditForm Model="Input" asp-route-returnUrl="@ReturnUrl" method="post" OnValidSubmit="RegisterUser" FormName="register">
      <DataAnnotationsValidator/>

      <MudText Typo="Typo.body1" GutterBottom="true">Create a new account.</MudText>

      <MudGrid>
        <MudItem xs="12">
          <MudStaticTextField For="@(() => Input.Email)" @bind-Value="Input.Email"
                              Label="Email" Placeholder="name@example.com"
                              UserAttributes="@(new Dictionary<string, object?> { { "autocomplete", "true" }, { "aria-required", "true" } })"/>
        </MudItem>
        <MudItem xs="12">
          <MudStaticTextField For="@(() => Input.Password)" @bind-Value="Input.Password"
                              Label="Password" InputType="InputType.Password" Placeholder="password"
                              UserAttributes="@(new Dictionary<string, object?> { { "autocomplete", "new-password" }, { "aria-required", "true" } })"/>
        </MudItem>
        <MudItem xs="12">
          <MudStaticTextField For="@(() => Input.ConfirmPassword)" @bind-Value="Input.ConfirmPassword"
                              Label="Confirm Password" InputType="InputType.Password" Placeholder="confirm password"
                              UserAttributes="@(new Dictionary<string, object?> { { "autocomplete", "new-password" }, { "aria-required", "true" } })"/>
        </MudItem>
        <MudItem xs="12">
          <MudStaticButton Variant="Variant.Filled" Color="Color.Primary" FullWidth="true" FormAction="FormAction.Submit">Register</MudStaticButton>
        </MudItem>
      </MudGrid>
    </EditForm>
  </MudItem>
  <MudItem md="6">
    <MudText Typo="Typo.body1" GutterBottom="true">Use another service to register.</MudText>
    <ExternalLoginPicker/>
  </MudItem>
</MudGrid>

@code {
  private IEnumerable<IdentityError>? _identityErrors;

  [SupplyParameterFromForm]
  private InputModel Input { get; set; } = new();

  [SupplyParameterFromQuery]
  private string? ReturnUrl { get; set; }

  private string? Message => _identityErrors is null
    ? null
    : $"Error: {string.Join(", ", _identityErrors.Select(error => error.Description))}";

  public async Task RegisterUser(EditContext editContext)
  {
    if (!await UserRegistrationProvider.IsSelfRegistrationEnabled())
    {
      Logger.LogCritical("Self-registration attempted while self-registration is disabled.  Email: {Email}", Input.Email);
      return;
    }

    var user = CreateUser();
    var tenant = new Tenant();
    user.Tenant = tenant;

    await UserStore.SetUserNameAsync(user, Input.Email, CancellationToken.None);
    var emailStore = GetEmailStore();
    await emailStore.SetEmailAsync(user, Input.Email, CancellationToken.None);
    var result = await UserManager.CreateAsync(user, Input.Password);

    if (!result.Succeeded)
    {
      _identityErrors = result.Errors;
      return;
    }

    Logger.LogInformation("User created a new account with password.");

    await UserManager.AddClaimAsync(user, new Claim(UserClaimTypes.TenantId, $"{tenant.Id}"));
    Logger.LogInformation("Added user's tenant ID claim.");

    await UserManager.AddToRoleAsync(user, RoleNames.TenantAdministrator);
    Logger.LogInformation("Assigned user role TenantAdministrator for newly-created tenant.");

    await UserManager.AddToRoleAsync(user, RoleNames.DeviceSuperUser);
    Logger.LogInformation("Assigned user role DeviceSuperUser for newly-created tenant.");

    if (await UserManager.Users.CountAsync() == 1)
    {
      Logger.LogInformation("First user created. User: {UserName}. Assigning server administrator role.", user.UserName);
      await UserManager.AddToRoleAsync(user, RoleNames.ServerAdministrator);
    }

    var userId = await UserManager.GetUserIdAsync(user);
    var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
    code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
    var callbackUrl = NavigationManager.GetUriWithQueryParameters(
      NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
      new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code, ["returnUrl"] = ReturnUrl });

    await EmailSender.SendConfirmationLinkAsync(user, Input.Email, HtmlEncoder.Default.Encode(callbackUrl));

    if (UserManager.Options.SignIn.RequireConfirmedAccount)
    {
      RedirectManager.RedirectTo(
        "Account/RegisterConfirmation",
        new Dictionary<string, object?> { ["email"] = Input.Email, ["returnUrl"] = ReturnUrl });
    }

    await SignInManager.SignInAsync(user, false);
    RedirectManager.RedirectTo(ReturnUrl);
  }

  protected override async Task OnInitializedAsync()
  {
    if (!await UserRegistrationProvider.IsSelfRegistrationEnabled())
    {
      RedirectManager.RedirectTo("/");
      return;
    }
    await base.OnInitializedAsync();
  }

  private AppUser CreateUser()
  {
    try
    {
      return Activator.CreateInstance<AppUser>();
    }
    catch
    {
      throw new InvalidOperationException($"Can't create an instance of '{nameof(AppUser)}'. " +
                                          $"Ensure that '{nameof(AppUser)}' is not an abstract class and has a parameterless constructor.");
    }
  }

  private IUserEmailStore<AppUser> GetEmailStore()
  {
    if (!UserManager.SupportsUserEmail)
    {
      throw new NotSupportedException("The default UI requires a user store with email support.");
    }

    return (IUserEmailStore<AppUser>)UserStore;
  }

  private sealed class InputModel
  {
    [Required]
    [EmailAddress]
    [Display(Name = "Email")]
    public string Email { get; set; } = "";

    [Required]
    [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
    [DataType(DataType.Password)]
    [Display(Name = "Password")]
    public string Password { get; set; } = "";

    [DataType(DataType.Password)]
    [Display(Name = "Confirm password")]
    [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
    public string ConfirmPassword { get; set; } = "";
  }

}