@page "/Account/ResetPassword"

@inject IdentityRedirectManager RedirectManager
@inject UserManager<AppUser> UserManager

<PageTitle>Reset password</PageTitle>

<MudText Typo="Typo.h3" GutterBottom>
  Reset password
</MudText>

<MudText Typo="Typo.h5" GutterBottom Class="mt-2">
  Reset your password.
</MudText>

<MudDivider Class="mb-2" />

<MudGrid>
  <MudItem xs="12" sm="6">
    <StatusMessage Message="@Message"/>

    <EditForm Model="Input" FormName="reset-password" OnValidSubmit="OnValidSubmitAsync" method="post">
      <DataAnnotationsValidator/>
      <ValidationSummary class="validation-error" role="alert"/>

      <input type="hidden" name="Input.Code" value="@Input.Code"/>
      <div class="mb-3">
        <MudStaticTextField @bind-Value="Input.Email" Required Label="Email" Placeholder="name@example.com"/>
        <ValidationMessage For="() => Input.Email" class="validation-error"/>
      </div>
      <div class="mb-3">
        <MudStaticTextField InputType="InputType.Password" @bind-Value="Input.Password" Placeholder="Please enter your password." Label="Password" />
        <ValidationMessage For="() => Input.Password" class="validation-error"/>
      </div>
      <div class="mb-3">
        <MudStaticTextField InputType="InputType.Password" @bind-Value="Input.ConfirmPassword" Placeholder="Please confirm your password." Label="Confirm password" />
        <ValidationMessage For="() => Input.ConfirmPassword" class="validation-error"/>
      </div>
      <div>
        <MudStaticButton Color="Color.Primary" Size="Size.Large" Variant="Variant.Outlined">
          Reset
        </MudStaticButton>
      </div>
    </EditForm>
  </MudItem>
</MudGrid>

@code {
  private IEnumerable<IdentityError>? _identityErrors;

  [SupplyParameterFromForm]
  private InputModel Input { get; set; } = new();

  [SupplyParameterFromQuery]
  private string? Code { get; set; }

  private string? Message => _identityErrors is null
    ? null
    : $"Error: {string.Join(", ", _identityErrors.Select(error => error.Description))}";

  protected override void OnInitialized()
  {
    if (Code is null)
    {
      RedirectManager.RedirectTo("Account/InvalidPasswordReset");
    }

    Input.Code = Encoding.UTF8.GetString(WebEncoders.Base64UrlDecode(Code));
  }

  private async Task OnValidSubmitAsync()
  {
    var user = await UserManager.FindByEmailAsync(Input.Email);
    if (user is null)
    {
      // Don't reveal that the user does not exist
      RedirectManager.RedirectTo("Account/ResetPasswordConfirmation");
    }

    var result = await UserManager.ResetPasswordAsync(user, Input.Code, Input.Password);
    if (result.Succeeded)
    {
      RedirectManager.RedirectTo("Account/ResetPasswordConfirmation");
    }

    _identityErrors = result.Errors;
  }

  private sealed class InputModel
  {
    [Required]
    [EmailAddress]
    public string Email { get; set; } = "";

    [Required]
    [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
    [DataType(DataType.Password)]
    public string Password { get; set; } = "";

    [DataType(DataType.Password)]
    [Display(Name = "Confirm password")]
    [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
    public string ConfirmPassword { get; set; } = "";

    [Required]
    public string Code { get; set; } = "";
  }

}