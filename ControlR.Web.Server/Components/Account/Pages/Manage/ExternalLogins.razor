@page "/Account/Manage/ExternalLogins"

@inject UserManager<AppUser> UserManager
@inject SignInManager<AppUser> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IUserStore<AppUser> UserStore
@inject IdentityRedirectManager RedirectManager

<PageTitle>Manage your external logins</PageTitle>

<StatusMessage/>
@if (_currentLogins?.Count > 0)
{
  <h3>Registered Logins</h3>
  <table class="table">
    <tbody>
    @foreach (var login in _currentLogins)
    {
      <tr>
        <td>@login.ProviderDisplayName</td>
        <td>
          @if (_showRemoveButton)
          {
            <form @formname="@($"remove-login-{login.LoginProvider}")" @onsubmit="OnSubmitAsync" method="post">
              <AntiforgeryToken/>
              <div>
                <input type="hidden" name="@nameof(LoginProvider)" value="@login.LoginProvider"/>
                <input type="hidden" name="@nameof(ProviderKey)" value="@login.ProviderKey"/>
                <button type="submit" class="btn btn-primary" title="Remove this @login.ProviderDisplayName login from your account">Remove</button>
              </div>
            </form>
          }
          else
          {
            @: &nbsp;
          }
        </td>
      </tr>
    }
    </tbody>
  </table>
}
@if (_otherLogins?.Count > 0)
{
  <h4>Add another service to log in.</h4>
  <MudDivider/>
  <form class="form-horizontal" action="Account/Manage/LinkExternalLogin" method="post">
    <AntiforgeryToken/>
    <div>
      <p>
        @foreach (var provider in _otherLogins)
        {
          <button type="submit" class="btn btn-primary" name="Provider" value="@provider.Name" title="Log in using your @provider.DisplayName account">
            @provider.DisplayName
          </button>
        }
      </p>
    </div>
  </form>
}

@code {
  public const string LinkLoginCallbackAction = "LinkLoginCallback";

  private AppUser _user = default!;
  private IList<UserLoginInfo>? _currentLogins;
  private IList<AuthenticationScheme>? _otherLogins;
  private bool _showRemoveButton;

  [CascadingParameter] private HttpContext HttpContext { get; set; } = default!;

  [SupplyParameterFromForm] private string? LoginProvider { get; set; }

  [SupplyParameterFromForm] private string? ProviderKey { get; set; }

  [SupplyParameterFromQuery] private string? Action { get; }

  protected override async Task OnInitializedAsync()
  {
    _user = await UserAccessor.GetRequiredUserAsync(HttpContext);
    _currentLogins = await UserManager.GetLoginsAsync(_user);
    _otherLogins = (await SignInManager.GetExternalAuthenticationSchemesAsync())
      .Where(auth => _currentLogins.All(ul => auth.Name != ul.LoginProvider))
      .ToList();

    string? passwordHash = null;
    if (UserStore is IUserPasswordStore<AppUser> userPasswordStore)
    {
      passwordHash = await userPasswordStore.GetPasswordHashAsync(_user, HttpContext.RequestAborted);
    }

    _showRemoveButton = passwordHash is not null || _currentLogins.Count > 1;

    if (HttpMethods.IsGet(HttpContext.Request.Method) && Action == LinkLoginCallbackAction)
    {
      await OnGetLinkLoginCallbackAsync();
    }
  }

  private async Task OnSubmitAsync()
  {
    var result = await UserManager.RemoveLoginAsync(_user, LoginProvider!, ProviderKey!);
    if (!result.Succeeded)
    {
      RedirectManager.RedirectToCurrentPageWithStatus("Error: The external login was not removed.", HttpContext);
    }

    await SignInManager.RefreshSignInAsync(_user);
    RedirectManager.RedirectToCurrentPageWithStatus("The external login was removed.", HttpContext);
  }

  private async Task OnGetLinkLoginCallbackAsync()
  {
    var userId = await UserManager.GetUserIdAsync(_user);
    var info = await SignInManager.GetExternalLoginInfoAsync(userId);
    if (info is null)
    {
      RedirectManager.RedirectToCurrentPageWithStatus("Error: Could not load external login info.", HttpContext);
    }

    var result = await UserManager.AddLoginAsync(_user, info);
    if (!result.Succeeded)
    {
      RedirectManager.RedirectToCurrentPageWithStatus("Error: The external login was not added. External logins can only be associated with one account.", HttpContext);
    }

    // Clear the existing external cookie to ensure a clean login process
    await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);

    RedirectManager.RedirectToCurrentPageWithStatus("The external login was added.", HttpContext);
  }

}