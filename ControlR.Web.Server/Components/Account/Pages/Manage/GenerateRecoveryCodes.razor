@page "/Account/Manage/GenerateRecoveryCodes"

@inject UserManager<AppUser> UserManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager
@inject ILogger<GenerateRecoveryCodes> Logger

<PageTitle>Generate two-factor authentication (2FA) recovery codes</PageTitle>

@if (_recoveryCodes is not null)
{
  <ShowRecoveryCodes RecoveryCodes="_recoveryCodes.ToArray()" StatusMessage="@_message" />
}
else
{
  <MudText Typo="Typo.h6" GutterBottom>
    Generate two-factor authentication (2FA) recovery codes
  </MudText>

  <MudAlert Severity="Severity.Warning">
    <MudText GutterBottom>
      <strong>Put these codes in a safe place.</strong>
    </MudText>

    <MudText GutterBottom>
      If you lose your device and don't have the recovery codes you will lose access to your account.
    </MudText>

    <MudText GutterBottom>
      Generating new recovery codes does not change the keys used in authenticator apps. If you wish to change the key
      used in an authenticator app you should <a href="Account/Manage/ResetAuthenticator">reset your authenticator keys.</a>
    </MudText>
  </MudAlert>


  <div class="mt-3">
    <form @formname="generate-recovery-codes" @onsubmit="OnSubmitAsync" method="post">
      <AntiforgeryToken />
      <MudStaticButton Color="Color.Error" Variant="Variant.Outlined">
        Generate Recovery Codes
      </MudStaticButton>
    </form>
  </div>
}

@code {
  private string? _message;
  private AppUser _user = default!;
  private IEnumerable<string>? _recoveryCodes;

  [CascadingParameter] private HttpContext HttpContext { get; set; } = default!;

  protected override async Task OnInitializedAsync()
  {
    _user = await UserAccessor.GetRequiredUserAsync(HttpContext);

    var isTwoFactorEnabled = await UserManager.GetTwoFactorEnabledAsync(_user);
    if (!isTwoFactorEnabled)
    {
      throw new InvalidOperationException("Cannot generate recovery codes for user because they do not have 2FA enabled.");
    }
  }

  private async Task OnSubmitAsync()
  {
    var userId = await UserManager.GetUserIdAsync(_user);
    _recoveryCodes = await UserManager.GenerateNewTwoFactorRecoveryCodesAsync(_user, 10);
    _message = "You have generated new recovery codes.";

    Logger.LogInformation("User with ID '{UserId}' has generated new 2FA recovery codes.", userId);
  }

}