@page "/Account/Manage"

@inject UserManager<AppUser> UserManager
@inject SignInManager<AppUser> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager

<PageTitle>Profile</PageTitle>

<MudText Typo="Typo.h6" GutterBottom="true">Profile</MudText>

<StatusMessage/>

<EditForm Model="Input" FormName="profile" OnValidSubmit="OnValidSubmitAsync" method="post">
  <DataAnnotationsValidator/>

  <MudGrid>
    <MudItem xs="12">
      <MudStaticTextField Value="@_username" Label="Username" Disabled="true" Placeholder="Please choose your username."/>
    </MudItem>
    <MudItem xs="12">
      <MudStaticTextField Value="@_userId" Label="User ID" ReadOnly HelperText="This is your unique user identifier."/>
    </MudItem>
    <MudItem xs="12">
      <MudStaticTextField For="@(() => Input.PhoneNumber)" @bind-Value="Input.PhoneNumber"
                          Label="Phone Number" HelperText="Please enter your phone number."
                          UserAttributes="@(new Dictionary<string, object?> { { "autocomplete", "tel-national" } })"/>
    </MudItem>
    <MudItem xs="12">
      <MudStaticButton Variant="Variant.Filled" Color="Color.Primary" FullWidth="true" FormAction="FormAction.Submit">Save</MudStaticButton>
    </MudItem>
  </MudGrid>
</EditForm>

@code {
  private AppUser _user = default!;
  private string? _username;
  private Guid _userId;
  private string? _phoneNumber;

  [CascadingParameter]
  private HttpContext HttpContext { get; set; } = default!;

  [SupplyParameterFromForm]
  private InputModel Input { get; set; } = new();

  protected override async Task OnInitializedAsync()
  {
    _user = await UserAccessor.GetRequiredUserAsync(HttpContext);
    _userId = _user.Id;
    _username = await UserManager.GetUserNameAsync(_user);
    _phoneNumber = await UserManager.GetPhoneNumberAsync(_user);

    Input.PhoneNumber ??= _phoneNumber;
  }

  private async Task OnValidSubmitAsync()
  {
    if (Input.PhoneNumber != _phoneNumber)
    {
      var setPhoneResult = await UserManager.SetPhoneNumberAsync(_user, Input.PhoneNumber);
      if (!setPhoneResult.Succeeded)
      {
        RedirectManager.RedirectToCurrentPageWithStatus("Error: Failed to set phone number.", HttpContext);
      }
    }

    await SignInManager.RefreshSignInAsync(_user);
    RedirectManager.RedirectToCurrentPageWithStatus("Your profile has been updated", HttpContext);
  }

  private sealed class InputModel
  {
    [Phone]
    [Display(Name = "Phone number")]
    public string? PhoneNumber { get; set; }
  }

}