@page "/Account/RegisterConfirmation"

@inject UserManager<AppUser> UserManager
@inject IEmailSender<AppUser> EmailSender
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Register confirmation</PageTitle>

<h1>Register confirmation</h1>

<StatusMessage Message="@_statusMessage"/>

@if (_emailConfirmationLink is not null)
{
  <p>
    This app does not currently have a real email sender registered, see <a class="mud-link mud-primary-text mud-link-underline-hover" href="https://aka.ms/aspaccountconf">these docs</a> for how to configure a real email sender.
    Normally this would be emailed: <a class="mud-link mud-primary-text mud-link-underline-hover" href="@_emailConfirmationLink">Click here to confirm your account</a>
  </p>
}
else
{
  <p>Please check your email to confirm your account.</p>
}

@code {
  private string? _emailConfirmationLink;
  private string? _statusMessage;

  [CascadingParameter] private HttpContext HttpContext { get; set; } = default!;

  [SupplyParameterFromQuery] private string? Email { get; }

  [SupplyParameterFromQuery] private string? ReturnUrl { get; }

  protected override async Task OnInitializedAsync()
  {
    if (Email is null)
    {
      RedirectManager.RedirectTo("");
    }

    var user = await UserManager.FindByEmailAsync(Email);
    if (user is null)
    {
      HttpContext.Response.StatusCode = StatusCodes.Status404NotFound;
      _statusMessage = "Error finding user for unspecified email";
    }
    else if (EmailSender is IdentityNoOpEmailSender)
    {
      // Once you add a real email sender, you should remove this code that lets you confirm the account
      var userId = await UserManager.GetUserIdAsync(user);
      var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
      code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
      _emailConfirmationLink = NavigationManager.GetUriWithQueryParameters(
        NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
        new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code, ["returnUrl"] = ReturnUrl });
    }
  }

}