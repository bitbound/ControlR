@page "/Account/LoginWithRecoveryCode"

@inject SignInManager<AppUser> SignInManager
@inject UserManager<AppUser> UserManager
@inject IdentityRedirectManager RedirectManager
@inject ILogger<LoginWithRecoveryCode> Logger

<PageTitle>Recovery code verification</PageTitle>

<MudText Typo="Typo.h3" GutterBottom>
  Recovery code verification
</MudText>

<MudDivider Class="mb-2" />

<StatusMessage Message="@_message" />

<MudText Typo="Typo.body1" GutterBottom Class="mb-3">
  You have requested to log in with a recovery code. This login will not be remembered until you provide
  an authenticator app code at log in or disable 2FA and log in again.
</MudText>

<MudGrid>
  <MudItem xs=12 sm="6">
    <EditForm Model="Input" FormName="login-with-2fa" OnValidSubmit="OnValidSubmitAsync" method="post">
      <DataAnnotationsValidator />
      <ValidationSummary class="validation-error" role="alert" />
      <div class="mb-3">
        <MudStaticTextField @bind-Value="Input.RecoveryCode" Label="Recovery Code" Placeholder="Recovery Code" />
        <ValidationMessage For="() => Input.RecoveryCode" class="validation-error" />
      </div>
      <div>
        <MudStaticButton Color="Color.Primary" Size="Size.Large" Variant="Variant.Outlined">
          Log in
        </MudStaticButton>
      </div>
    </EditForm>
  </MudItem>
</MudGrid>

@code {
  private string? _message;
  private AppUser _user = default!;

  [SupplyParameterFromForm]
  private InputModel Input { get; set; } = new();

  [SupplyParameterFromQuery]
  private string? ReturnUrl { get; set; }

  protected override async Task OnInitializedAsync()
  {
    // Ensure the user has gone through the username & password screen first
    _user = await SignInManager.GetTwoFactorAuthenticationUserAsync() ??
            throw new InvalidOperationException("Unable to load two-factor authentication user.");
  }

  private async Task OnValidSubmitAsync()
  {
    var recoveryCode = Input.RecoveryCode.Replace(" ", string.Empty);

    var result = await SignInManager.TwoFactorRecoveryCodeSignInAsync(recoveryCode);

    var userId = await UserManager.GetUserIdAsync(_user);

    if (result.Succeeded)
    {
      Logger.LogInformation("User with ID '{UserId}' logged in with a recovery code.", userId);
      RedirectManager.RedirectTo(ReturnUrl);
    }
    else if (result.IsLockedOut)
    {
      Logger.LogWarning("User account locked out.");
      RedirectManager.RedirectTo("Account/Lockout");
    }
    else
    {
      Logger.LogWarning("Invalid recovery code entered for user with ID '{UserId}' ", userId);
      _message = "Error: Invalid recovery code entered.";
    }
  }

  private sealed class InputModel
  {
    [Required]
    [DataType(DataType.Text)]
    [Display(Name = "Recovery Code")]
    public string RecoveryCode { get; set; } = "";
  }

}