@inject SignInManager<AppUser> SignInManager
@inject IdentityRedirectManager RedirectManager

@if (_externalLogins.Length == 0)
{
  <MudAlert Variant="Variant.Text" Severity="Severity.Warning">There are no external authentication services configured.</MudAlert>
}
else
{
  @foreach (var provider in _externalLogins)
  {
    <form class="form-horizontal" action="Account/PerformExternalLogin" method="post">
      <div class="mt-3">
        <AntiforgeryToken/>
        <input type="hidden" name="ReturnUrl" value="@ReturnUrl"/>
        <p>
          <input type="hidden" name="provider" value="@provider.Name"/>

          @switch (provider.Name)
          {
            case "Microsoft":
              <button type="submit">
                <img src="images/sign-in-microsoft.svg" alt="Sign in with Microsoft"/>
              </button>
              break;
            case "GitHub":
              <MudButton ButtonType="ButtonType.Submit"
                         Color="Color.Info"
                         StartIcon="@(Icons.Custom.Brands.GitHub)"
                         Variant="Variant.Outlined">
                Sign in with GitHub
              </MudButton>
              break;
            default:
              <MudButton Variant="Variant.Outlined"
                         Color="Color.Info"
                         ButtonType="ButtonType.Submit">
                @provider.DisplayName
              </MudButton>
              break;
          }

        </p>
      </div>
    </form>
  }
  
}

@code {
  private AuthenticationScheme[] _externalLogins = [];

  [SupplyParameterFromQuery]
  private string? ReturnUrl { get; set; }

  protected override async Task OnInitializedAsync()
  {
    _externalLogins = (await SignInManager.GetExternalAuthenticationSchemesAsync()).ToArray();
  }

}