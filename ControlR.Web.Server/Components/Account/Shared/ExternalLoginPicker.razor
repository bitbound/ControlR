@inject SignInManager<AppUser> SignInManager
@inject IdentityRedirectManager RedirectManager

@if (_externalLogins.Length == 0)
{
  <MudAlert Variant="Variant.Text" Severity="Severity.Warning">There are no external authentication services configured.</MudAlert>
}
else
{
  <form class="form-horizontal" action="Account/PerformExternalLogin" method="post">
    <div>
      <AntiforgeryToken/>
      <input type="hidden" name="ReturnUrl" value="@ReturnUrl"/>
      <p>
        @foreach (var provider in _externalLogins)
        {
          <input type="hidden" name="provider" value="@provider.Name"/>

          @if (provider.Name == "Microsoft")
          {
            <button type="submit">
              <img src="images/sign-in-microsoft.svg" alt="Sign in with Microsoft"/>
            </button>
          }
          else
          {
            <MudButton Variant="Variant.Outlined"
                       Color="Color.Info"
                       ButtonType="ButtonType.Submit">
              @provider.DisplayName
            </MudButton>
          }
        }
      </p>
    </div>
  </form>
}

@code {
  private AuthenticationScheme[] _externalLogins = [];

  [SupplyParameterFromQuery]
  private string? ReturnUrl { get; set; }

  protected override async Task OnInitializedAsync()
  {
    _externalLogins = (await SignInManager.GetExternalAuthenticationSchemesAsync()).ToArray();
  }

}