@layout DeviceAccessLayout
@page "/device-access/file-system"
@attribute [Authorize]
@inherits JsInteropableComponent
@using ControlR.Web.Client.Components.Layout.DeviceAccess
@using ControlR.Libraries.Shared.Helpers

<div @ref="_containerRef" class="file-system-container h-100">
  <div class="address-bar-container">
    <MudTextField @bind-Value="AddressBarValue" Label="Address" Variant="Variant.Outlined" Immediate
      Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.SubdirectoryArrowRight"
      AdornmentColor="Color.Primary" OnAdornmentClick="NavigateToAddress"
      @onkeypress="@(async (KeyboardEventArgs e) => { if (e.Key == "Enter") await NavigateToAddress(); })"
      FullWidth="true" Class="address-bar" />
  </div>
  <div class="file-system-grid">
    <div @ref="_treePanelRef" class="tree-panel">
      <MudText Typo="Typo.h6" Class="mb-3">Folders</MudText>
      @if (InitialTreeItems.Count == 0 && IsLoading)
      {
        <div class="d-flex justify-center align-center" style="height: 200px;">
          <MudProgressCircular Indeterminate="true" />
        </div>
      }
      else if (InitialTreeItems.Count == 0)
      {
        <MudAlert Severity="Severity.Info">No drives found or unable to load file system.</MudAlert>
      }
      else
      {
        <MudTreeView ServerData="@LoadServerData" Items="@InitialTreeItems" @bind-SelectedValue="SelectedPath" T="string"
          Dense="true" ExpandOnDoubleClick>
          <ItemTemplate>
            <MudTreeViewItem Value="@context.Value" Text="@context.Text" Items="@context.Children"
              ItemsChanged="@(new Action<IReadOnlyCollection<TreeItemData<string>>>(items => OnItemsLoaded(context, items)))"
              @bind-Expanded="@context.Expanded" CanExpand="@context.Expandable" Icon="@context.Icon"
              LoadingIconColor="Color.Info" />
          </ItemTemplate>
        </MudTreeView>
      }
    </div>

    <div @ref="_splitterRef" class="grid-splitter"></div>

    <div @ref="_contentPanelRef" class="content-panel">
      <div class="d-flex flex-wrap gap-2 justify-space-between align-center mb-3">
        <div class="d-flex align-center flex-grow-1 gap-2 search-bar-container" style="min-width: 250px;">
          <MudText Typo="Typo.h6" Class="mb-0 me-2">Contents</MudText>
          <MudTextField @bind-Value="_searchText"
                        Placeholder="Search current directory"
                        Adornment="Adornment.Start"
                        AdornmentIcon="@Icons.Material.Filled.Search"
                        Immediate
                        DebounceInterval="400"
                        Clearable
                        Class="search-field flex-grow-1" />
        </div>
        <div class="file-operations-toolbar d-flex align-center gap-1">
          @if (CurrentBreakpoint < Breakpoint.Lg)
          {
            <MudTooltip Text="Upload File">
              <MudIconButton Icon="@Icons.Material.Filled.Upload" Color="Color.Default" Size="Size.Small"
                OnClick="OnUploadFileClick" Disabled="@(string.IsNullOrEmpty(SelectedPath) || IsUploadInProgress)" />
            </MudTooltip>
            <MudTooltip Text="Download">
              <MudIconButton Icon="@Icons.Material.Filled.Download" Color="Color.Default" Size="Size.Small"
                OnClick="OnDownloadClick" Disabled="@(SelectedItems.Count == 0 || IsDownloadInProgress)" />
            </MudTooltip>
            <MudTooltip Text="Delete">
              <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" Size="Size.Small"
                OnClick="OnDeleteClick" Disabled="@(SelectedItems.Count == 0 || IsDeleteInProgress)" />
            </MudTooltip>
            <MudTooltip Text="New Folder">
              <MudIconButton Icon="@Icons.Material.Filled.CreateNewFolder" Color="Color.Default" Size="Size.Small"
                OnClick="OnNewFolderClick" Disabled="@(string.IsNullOrEmpty(SelectedPath) || IsNewFolderInProgress)" />
            </MudTooltip>
          }
          else
          {
            <MudButton Variant="Variant.Outlined" Color="Color.Default" StartIcon="@Icons.Material.Filled.Upload"
              Class="me-2" Size="Size.Small" OnClick="OnUploadFileClick"
              Disabled="@(string.IsNullOrEmpty(SelectedPath) || IsUploadInProgress)">
              Upload
            </MudButton>
            <MudButton Variant="Variant.Outlined" Color="Color.Default" StartIcon="@Icons.Material.Filled.Download"
              Class="me-2" Size="Size.Small" OnClick="OnDownloadClick"
              Disabled="@(SelectedItems.Count == 0 || IsDownloadInProgress)">
              Download
            </MudButton>
            <MudButton Variant="Variant.Outlined" Color="Color.Error" StartIcon="@Icons.Material.Filled.Delete"
              Class="me-2" Size="Size.Small" OnClick="OnDeleteClick"
              Disabled="@(SelectedItems.Count == 0 || IsDeleteInProgress)">
              Delete
            </MudButton>
            <MudButton Variant="Variant.Outlined" Color="Color.Default" StartIcon="@Icons.Material.Filled.CreateNewFolder"
              Class="me-2" Size="Size.Small" OnClick="OnNewFolderClick"
              Disabled="@(string.IsNullOrEmpty(SelectedPath) || IsNewFolderInProgress)">
              New Folder
            </MudButton>
          }
          <MudTooltip Text="Refresh">
            <MudIconButton Icon="@Icons.Material.Filled.Refresh" Color="Color.Info" Size="Size.Small"
              OnClick="OnRefreshClick" Disabled="@IsLoadingContents" />
          </MudTooltip>
        </div>
      </div>
      @if (IsLoadingContents)
      {
        <div class="d-flex justify-center align-center" style="height: 200px;">
          <MudProgressCircular Indeterminate="true" />
        </div>
      }
      else if (!string.IsNullOrEmpty(SelectedPath))
      {
        <MudDataGrid T="FileSystemEntryViewModel"
                     Items="DirectoryContents"
                     @bind-SelectedItems="SelectedItems"
                     Dense="true"
                     Hover="true"
                     SortMode="SortMode.Multiple"
                     Filterable="true"
                     Hideable="false"
                     RowsPerPage="50"
                     MultiSelection="true"
                     RowClick="HandleFileSystemRowClick"
                     RowClass="cursor-pointer"
                     QuickFilter="JsonValueFilter.GetQuickFilter<FileSystemEntryViewModel>(_searchText, Logger)">
          <Columns>
            <SelectColumn T="FileSystemEntryViewModel" />
            <PropertyColumn Property="x => x.Icon" Title="" Sortable="false" Filterable="false">
              <CellTemplate>
                <MudIcon Icon="@context.Item.Icon" Size="Size.Small" />
              </CellTemplate>
            </PropertyColumn>
            <PropertyColumn Property="x => x.Name" Title="Name" />
            <PropertyColumn Property="x => x.FormattedSize" Title="Size" Sortable="false" />
            <PropertyColumn Property="x => x.LastModified" Title="Modified" />
          </Columns>
          <PagerContent>
            <MudDataGridPager T="FileSystemEntryViewModel" />
          </PagerContent>
        </MudDataGrid>
      }
      else
      {
        <MudAlert Severity="Severity.Info">Select a folder to view its contents.</MudAlert>
      }
    </div>
  </div>
</div>

<!-- Hidden file input for uploads -->
<InputFile @ref="_fileInputRef" OnChange="OnFilesSelected" multiple style="display: none;" accept="*/*" />