@attribute [Route(RouteNames.Settings)]
@attribute [Authorize]

@inject ISettings SettingsStore
@inject ISnackbar Snackbar
@inject IMessenger Messenger
@inject IViewerHubConnection HubConnection
@inject IDeviceCache DeviceCache
@inject IBusyCounter AppState
@inject IDialogService Dialogs
@inject ILogger<Settings> Logger

<PageTitle>Settings</PageTitle>

<MudText Typo="Typo.h4" Color="Color.Primary" GutterBottom>
  Settings
</MudText>

<div class="mt-10">
  <MudText Typo="Typo.h6" Color="Color.Primary" GutterBottom>
    Show Notification to User
  </MudText>
  <MudCheckBox T="bool" 
               @bind-Value:get="_notifyUser"
               @bind-Value:set="SetNotifyUser"
               Label="Notify users when a remote control session starts"/>
</div>


@code {

  private bool _notifyUser;

  protected override async Task OnInitializedAsync()
  {
    _notifyUser = await SettingsStore.GetNotifyUserOnSessionStart();
    await base.OnInitializedAsync();
  }

  private async Task SetNotifyUser(bool value)
  {
    _notifyUser = value;
    await SettingsStore.SetNotifyUserOnSessionStart(value);
  }

  private string? ValidateUsername(string input)
  {
    if (string.IsNullOrEmpty(input))
    {
      return null;
    }

    if (input.Length > 25)
    {
      return "Username must be 25 characters or less.";
    }

    return AppConstants.UsernameValidator().IsMatch(input)
      ? "Username can only contain letters, numbers, underscores, and hyphens."
      : null;
  }

}