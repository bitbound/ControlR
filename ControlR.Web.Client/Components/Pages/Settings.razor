@attribute [Route(ClientRoutes.Settings)]
@attribute [Authorize]

@inject ISnackbar Snackbar
@inject IUserSettingsProvider SettingsStore
@inject ITenantSettingsProvider TenantSettingsProvider
@inject IClipboardManager ClipboardManager
@inject AuthenticationStateProvider AuthState

<PageTitle>Settings</PageTitle>

<PrimaryTitle>
  Settings
</PrimaryTitle>

<div class="mt-10">
  <MudText Typo="Typo.h6" Color="Color.Primary" GutterBottom>
    Tenant ID
  </MudText>
  <MudTextField T="Guid?"
                Label="Your Tenant ID"
                ReadOnly="true"
                Variant="Variant.Filled"
                AdornmentIcon="@(Icons.Material.Filled.ContentCopy)"
                OnAdornmentClick="CopyTenantId"
                Adornment="Adornment.End"
                Value="_tenantId"/>
</div>

<div class="mt-10">
  <MudText Typo="Typo.h6" Color="Color.Primary" GutterBottom>
    User ID
  </MudText>
  <MudTextField T="Guid?"
                Label="Your User ID"
                ReadOnly="true"
                Variant="Variant.Filled"
                AdornmentIcon="@(Icons.Material.Filled.ContentCopy)"
                OnAdornmentClick="CopyUserId"
                Adornment="Adornment.End"
                Value="_userId"/>
</div>

<div class="mt-10">
  <MudText Typo="Typo.h6" Color="Color.Primary" GutterBottom>
    User Display Name
  </MudText>
  <MudTextField T="string"
                @bind-Value:get="_userDisplayName"
                @bind-Value:set="SetUserDisplayName"
                MaxLength="25"
                Validation="(string e) => ValidateUsername(e)"
                Label="Shown to partners when connecting">

  </MudTextField>
</div>

<div class="mt-10">
  <MudText Typo="Typo.h6" Color="Color.Primary" GutterBottom>
    Show Notification to User
  </MudText>
  
  @if (_tenantNotifySetting.HasValue)
  {
    <MudAlert Severity="Severity.Info" Class="mb-3">
      This setting is being enforced by your tenant administrator.
      @if (_tenantNotifySetting.Value)
      {
        <text>Users will always be notified when remote control sessions start.</text>
      }
      else
      {
        <text>Users will never be notified when remote control sessions start.</text>
      }
    </MudAlert>
  }
  
  <MudCheckBox T="bool"
               @bind-Value:get="_notifyUser"
               @bind-Value:set="SetNotifyUser"
               Disabled="_tenantNotifySetting.HasValue"
               Label="Notify users when a remote control session starts"/>
</div>

@code {

  private bool _notifyUser;
  private string _userDisplayName = "";
  private Guid? _tenantId;
  private Guid? _userId;
  private bool? _tenantNotifySetting;

  protected override async Task OnInitializedAsync()
  {
    var state = await AuthState.GetAuthenticationStateAsync();
    if (state.User.TryGetTenantId(out var tenantId))
    {
      _tenantId = tenantId;
    }

    if (state.User.TryGetUserId(out var userId))
    {
      _userId = userId;
    }

    // Check if tenant has enforced the notify user setting
    _tenantNotifySetting = await TenantSettingsProvider.GetNotifyUserOnSessionStart();
    
    _notifyUser = await SettingsStore.GetNotifyUserOnSessionStart();
    _userDisplayName = await SettingsStore.GetUserDisplayName();
    
    // If tenant setting is enforced, override the user setting display
    if (_tenantNotifySetting.HasValue)
    {
      _notifyUser = _tenantNotifySetting.Value;
    }
    
    await base.OnInitializedAsync();
  }

  private async Task CopyUserId()
  {
    await ClipboardManager.SetText($"{_userId}");
    Snackbar.Add("Copied to clipboard", Severity.Success);
  }

  private async Task CopyTenantId()
  {
    await ClipboardManager.SetText($"{_tenantId}");
    Snackbar.Add("Copied to clipboard", Severity.Success);
  }

  private async Task SetNotifyUser(bool value)
  {
    // Don't allow changes if tenant setting is enforced
    if (_tenantNotifySetting.HasValue)
    {
      return;
    }
    
    _notifyUser = value;
    await SettingsStore.SetNotifyUserOnSessionStart(value);
  }

  private async Task SetUserDisplayName(string value)
  {
    _userDisplayName = value;
    await SettingsStore.SetUserDisplayName(value);
    Snackbar.Add("Display name updated", Severity.Success);
  }

  private static string? ValidateUsername(string input)
  {
    if (string.IsNullOrEmpty(input))
    {
      return null;
    }

    if (input.Length > 25)
    {
      return "Username must be 25 characters or less.";
    }

    return Validators.UsernameValidator().IsMatch(input)
      ? "Username can only contain letters, numbers, underscores, and hyphens."
      : null;
  }

}