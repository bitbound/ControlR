@attribute [Route(ClientRoutes.Settings)]
@attribute [Authorize]

@inject ISnackbar Snackbar
@inject ISettings SettingsStore
@inject IClipboardManager ClipboardManager
@inject AuthenticationStateProvider AuthState

<PageTitle>Settings</PageTitle>

<PrimaryTitle>
  Settings
</PrimaryTitle>

<div class="mt-10">
  <MudText Typo="Typo.h6" Color="Color.Primary" GutterBottom>
    Tenant ID
  </MudText>
  <MudTextField T="Guid?"
                Label="Your Tenant ID"
                ReadOnly="true"
                Variant="Variant.Filled"
                AdornmentIcon="@(Icons.Material.Filled.ContentCopy)"
                OnAdornmentClick="CopyTenantId"
                Adornment="Adornment.End"
                Value="_tenantId"/>
</div>

<div class="mt-10">
  <MudText Typo="Typo.h6" Color="Color.Primary" GutterBottom>
    User Display Name
  </MudText>
  <MudTextField T="string"
                @bind-Value:get="_userDisplayName"
                @bind-Value:set="SetUserDisplayName"
                MaxLength="25"
                Validation="(string e) => ValidateUsername(e)"
                Label="Shown to partners when connecting">

  </MudTextField>
</div>

<div class="mt-10">
  <MudText Typo="Typo.h6" Color="Color.Primary" GutterBottom>
    Show Notification to User
  </MudText>
  <MudCheckBox T="bool"
               @bind-Value:get="_notifyUser"
               @bind-Value:set="SetNotifyUser"
               Label="Notify users when a remote control session starts"/>
</div>


@code {

  private bool _notifyUser;
  private string _userDisplayName = "";
  private Guid? _tenantId;

  protected override async Task OnInitializedAsync()
  {
    var state = await AuthState.GetAuthenticationStateAsync();
    if (state.User.TryGetTenantId(out var tenantId))
    {
      _tenantId = tenantId;
    }

    _notifyUser = await SettingsStore.GetNotifyUserOnSessionStart();
    _userDisplayName = await SettingsStore.GetUserDisplayName();
    await base.OnInitializedAsync();
  }

  private async Task CopyTenantId()
  {
    await ClipboardManager.SetText($"{_tenantId}");
    Snackbar.Add("Copied to clipboard", Severity.Success);
  }

  private async Task SetNotifyUser(bool value)
  {
    _notifyUser = value;
    await SettingsStore.SetNotifyUserOnSessionStart(value);
  }

  private async Task SetUserDisplayName(string value)
  {
    _userDisplayName = value;
    await SettingsStore.SetUserDisplayName(value);
    Snackbar.Add("Display name updated", Severity.Success);
  }

  private static string? ValidateUsername(string input)
  {
    if (string.IsNullOrEmpty(input))
    {
      return null;
    }

    if (input.Length > 25)
    {
      return "Username must be 25 characters or less.";
    }

    return Validators.UsernameValidator().IsMatch(input)
      ? "Username can only contain letters, numbers, underscores, and hyphens."
      : null;
  }

}