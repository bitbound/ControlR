@using System.ComponentModel.DataAnnotations
@attribute [Route(ClientRoutes.Invite)]
@attribute [Authorize(Roles = RoleNames.TenantAdministrator)]
@inject ILogger<Invite> Logger
@inject IInviteStore InviteStore
@inject IControlrApi ControlrApi
@inject ISnackbar Snackbar
@inject IClipboardManager ClipboardManager
@inject IDialogService DialogService

<div>

  <PageTitle>Invite</PageTitle>
  <MudText Typo="Typo.h4" Color="Color.Primary" GutterBottom>
    Invite
  </MudText>

  <MudText Typo="Typo.subtitle1" GutterBottom>
    Add new users to your tenant, and manage pending invitations.
  </MudText>

  <MudDataGrid T="TenantInviteResponseDto"
               RowsPerPage="@(25)"
               Items="InviteStore.Items"
               SortMode="SortMode.Multiple"
               QuickFilter="JsonValueFilter.GetQuickFilter<TenantInviteResponseDto>(_searchText, Logger)"
               Loading="_loading"
               SortDefinitions="_sortDefinitions"
               ShowColumnOptions="true"
               Class="mt-4"
               Filterable="true">
    <ToolBarContent>
      <EditForm EditContext="@_editContext" class="flex-grow-1">

        <DataAnnotationsValidator />
        <MudTextField T="string"
                      @bind-Value="_inputModel.Email"
                      For="@(() => _inputModel.Email)"
                      Label="Invite New User"
                      InputType="InputType.Email"
                      Immediate
                      Placeholder="Enter the email of the new user"
                      AdornmentIcon="@(Icons.Material.Filled.PersonAdd)"
                      OnAdornmentClick="InvokeSubmit"
                      UserAttributes="_inputAttributes"
                      AdornmentColor="Color.Success"
                      AdornmentAriaLabel="Create Tag"
                      Adornment="Adornment.End"
                      FullWidth="true"
                      OnKeyDown="HandleNewInviteKeyDown">
        </MudTextField>
      </EditForm>

      <MudTextField T="string"
                    @bind-Value="_searchText"
                    Placeholder="Search"
                    Clearable
                    Adornment="Adornment.Start"
                    Immediate
                    DebounceInterval="500"
                    AdornmentIcon="@Icons.Material.Filled.Search"
                    IconSize="Size.Medium"
                    Class="flex-grow-1">
      </MudTextField>

      <MudTooltip Text="Refresh">
        <MudIconButton Variant="Variant.Outlined"
                       Color="Color.Info"
                       Icon="@(Icons.Material.Filled.Refresh)"
                       OnClick="HandleRefreshClicked" />
      </MudTooltip>
    </ToolBarContent>

    <Columns>
      <PropertyColumn T="TenantInviteResponseDto"
                      TProperty="string"
                      Sortable="true"
                      Filterable="true"
                      Title="Invitee Email"
                      Property="@(x => x.InviteeEmail)">
      </PropertyColumn>

      <TemplateColumn T="TenantInviteResponseDto"
                      Sortable="true"
                      Filterable="true"
                      Title="Created At">
        <CellTemplate>
          @(context.Item.CreatedAt)
        </CellTemplate>
      </TemplateColumn>

      <TemplateColumn T="TenantInviteResponseDto"
                      Sortable="true"
                      Filterable="true"
                      Title="Invite URL">
        <CellTemplate>
          <MudTextField T="Uri"
                        Label="Copy to share URL"
                        ReadOnly="true"
                        Variant="Variant.Filled"
                        InputType="InputType.Password"
                        AdornmentIcon="@(Icons.Material.Filled.ContentCopy)"
                        OnAdornmentClick="@(() => CopyInviteUrl(context.Item.InviteUrl))"
                        AdornmentColor="Color.Secondary"
                        Adornment="Adornment.End"
                        Value="context.Item.InviteUrl" />
        </CellTemplate>
      </TemplateColumn>
      <TemplateColumn T="TenantInviteResponseDto"
                      Sortable="false"
                      Filterable="false"
                      ShowColumnOptions="false"
                      Title="Delete Invite">
        <CellTemplate>
          <MudTooltip Text="Delete Invitation">
            <MudIconButton Icon="@(Icons.Material.Filled.DeleteForever)"
                           ButtonType="ButtonType.Button"
                           Color="Color.Error"
                           OnClick="@(() => DeleteInvite(context.Item))" />
          </MudTooltip>
        </CellTemplate>
      </TemplateColumn>
    </Columns>
  </MudDataGrid>

</div>
@code {
  private InputModel _inputModel = new();
  private EditContext? _editContext;
  private bool _loading = true;
  private string _searchText = string.Empty;
  private readonly Dictionary<string, object> _inputAttributes = new()
    {
      ["autocapitalize"] = "off",
      ["spellcheck"] = "false",
      ["autocomplete"] = "off"
    };

  private ObservableCollection<TenantInviteResponseDto> Invitations { get; } = [];

  private readonly Dictionary<string, SortDefinition<TenantInviteResponseDto>> _sortDefinitions = new()
    {
      ["CreatedAt"] = new SortDefinition<TenantInviteResponseDto>(
                        SortBy: nameof(TenantInviteResponseDto.CreatedAt),
                      Descending: false,
                      Index: 0,
                      SortFunc: x => x.CreatedAt)
    };

  protected override async Task OnInitializedAsync()
  {
    await base.OnInitializedAsync();

    _editContext = new EditContext(_inputModel);
    await InviteStore.Refresh();
    InviteStore.RegisterChangeHandler(this, HandleInviteStoreChanged);
    _loading = false;
  }

  private async Task CopyInviteUrl(Uri inviteUrl)
  {
    try
    {
      await ClipboardManager.SetText(inviteUrl.ToString());
      Snackbar.Add("Copied to clipboard", Severity.Success);
    }
    catch (Exception ex)
    {
      Logger.LogError(ex, "Error while copying invite URL to clipboard.");
      Snackbar.Add("Error while copying invite URL to clipboard", Severity.Error);
    }
  }

  private async Task DeleteInvite(TenantInviteResponseDto dto)
  {
    var result = await DialogService.ShowMessageBox(
      "Confirm Delete",
      "Are you sure you want to delete this invitaiton and user?",
      yesText: "Yes",
      noText: "No");

    if (!result.HasValue || !result.Value)
    {
      return;
    }

    var deleteResult = await ControlrApi.DeleteTenantInvite(dto.Id);
    if (!deleteResult.IsSuccess)
    {
      Snackbar.Add(deleteResult.Reason, Severity.Error);
      return;
    }

    await InviteStore.Remove(dto.Id);
    await InvokeAsync(StateHasChanged);
    Snackbar.Add("Invite deleted", Severity.Success);
  }

  private async Task HandleInviteStoreChanged()
  {
    await InvokeAsync(StateHasChanged);
  }

  private async Task HandleNewInviteKeyDown(KeyboardEventArgs args)
  {
    if (args.Key == "Enter")
    {
      await InvokeSubmit();
    }
  }

  private async Task InvokeSubmit()
  {
    if (_editContext?.Validate() == false)
    {
      return;
    }

    if (string.IsNullOrWhiteSpace(_inputModel.Email))
    {
      return;
    }
    var createResult = await ControlrApi.CreateTenantInvite(_inputModel.Email);
    if (!createResult.IsSuccess)
    {
      Snackbar.Add(createResult.Reason, Severity.Error);
      return;
    }

    _inputModel.Email = string.Empty;
    await InviteStore.Refresh();
    await InvokeAsync(StateHasChanged);
    Snackbar.Add("Invite created", Severity.Success);
  }

  private async Task HandleRefreshClicked()
  {
    await InviteStore.Refresh();
  }

  private class InputModel
  {
    [Required]
    [EmailAddress]
    public string? Email { get; set; }
  }
}
