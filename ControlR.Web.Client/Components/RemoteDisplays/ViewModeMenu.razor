@using ControlR.Web.Client.Services.DeviceAccess
@inherits ViewportAwareComponent
@inject ISnackbar Snackbar
@inject IRemoteControlState RemoteControlState

<MudTooltip Text="View Mode" Class="z9002" Placement="Placement.Right">
    <MudMenu Variant="Variant.Outlined"
             StartIcon="@GetStartIcon()"
             Icon="@GetIcon()"
             Label="@GetLabel()"
             Size="Size.Small"
             PopoverClass="z9002">

        <MudMenuItem Icon="@(Icons.Material.Filled.FitScreen)"
                     IconColor="@(RemoteControlState.ViewMode == ViewMode.Fit ? Color.Success : Color.Default)"
                     OnClick="@(() => SelectViewMode(ViewMode.Fit))"
                     @ontouchend="() => SelectViewMode(ViewMode.Fit)">
            Fit
        </MudMenuItem>
        <MudMenuItem Icon="@(Icons.Material.Filled.OpenInFull)"
                     IconColor="@(RemoteControlState.ViewMode == ViewMode.Stretch ? Color.Success : Color.Default)"
                     OnClick="@(() => SelectViewMode(ViewMode.Stretch))"
                     @ontouchend="() => SelectViewMode(ViewMode.Stretch)">
            Stretch
        </MudMenuItem>
        <MudMenuItem Icon="@(Icons.Material.Filled.Fullscreen)"
                     IconColor="@(RemoteControlState.ViewMode == ViewMode.Original ? Color.Success : Color.Default)"
                     OnClick="@(() => SelectViewMode(ViewMode.Original))"
                     @ontouchend="() => SelectViewMode(ViewMode.Original)">
            Original
        </MudMenuItem>
    </MudMenu>
</MudTooltip>

@code {
    private string GetLabel()
    {
        return CurrentBreakpoint >= Breakpoint.Sm ? "View" : string.Empty;
    }

    private string GetStartIcon()
    {
        return CurrentBreakpoint >= Breakpoint.Sm ? Icons.Material.Filled.FitScreen : string.Empty;
    }

    private string GetIcon()
    {
        return CurrentBreakpoint < Breakpoint.Sm ? Icons.Material.Filled.FitScreen : string.Empty;
    }

    private void SelectViewMode(ViewMode viewMode)
    {
        RemoteControlState.ViewMode = viewMode;
        RemoteControlState.NotifyStateChanged();
    }
}
