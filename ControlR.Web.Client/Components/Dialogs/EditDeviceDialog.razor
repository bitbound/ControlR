<div>
  <MudDialog>
    <TitleContent>
      <MudText Typo="Typo.h5" Color="Color.Primary">
        Edit Device
      </MudText>
    </TitleContent>
    <DialogContent>
      <MudForm @ref="_form" @bind-IsValid="@_formIsValid">
        <MudCard>
          <MudCardContent>
            <MudTextField T="string" @bind-Value="_appSettingsJson" @bind-Text="_appSettingsJson"
              Label="Agent Appsettings File" Lines="15" HelperText="Edit the appsettings.json file on the agent."
              InputType="InputType.Text" Required="true" ErrorText="Invalid JSON." Class="no-wrap" Immediate="true"
              DebounceInterval="500" UserAttributes="_editorAttributes" Validation="@((string val) => true)" />

          </MudCardContent>
          <MudCardActions Class="justify-end">
            <MudButton ButtonType="ButtonType.Button" Variant="Variant.Outlined" Color="Color.Default" Class="me-3"
              OnClick="Cancel">
              Cancel
            </MudButton>
            <MudButton ButtonType="ButtonType.Button" Variant="Variant.Outlined" Color="Color.Primary"
              Disabled="!_formIsValid" OnClick="Save">
              Save
            </MudButton>
          </MudCardActions>
        </MudCard>
      </MudForm>
    </DialogContent>
  </MudDialog>

</div>
@code {
  private readonly JsonSerializerOptions _jsonOptions = new() { WriteIndented = true };
  private readonly Dictionary<string, object> _editorAttributes = new()
  {
    ["spellcheck"] = "false"
  };
  private bool _formIsValid;
  private MudForm? _form;

  private string _appSettingsJson = string.Empty;

  [Parameter]
  public required DeviceViewModel DeviceViewModel { get; set; }

  [CascadingParameter]
  public required IMudDialogInstance DialogInstance { get; init; }

  [Inject]
  public required ILogger<EditDeviceDialog> Logger { get; init; }

  [Inject]
  public required ISnackbar Snackbar { get; init; }

  [Inject]
  public required IViewerHubConnection ViewerHub { get; set; }

  private void Cancel()
  {
    DialogInstance.Close(DialogResult.Cancel());
  }

  private Task Save()
  {
    try
    {

    }
    catch
    {
      Snackbar.Add("Failed to save settings", Severity.Error);
    }
    return Task.CompletedTask;
  }

}
