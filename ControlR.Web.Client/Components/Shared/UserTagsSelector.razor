@using System.Collections.Immutable

@inject IUserTagStore UserTagStore

<MudSelect T="TagViewModel" MultiSelection="true" MultiSelectionTextFunc="GetTagsMultiSelectText"
  Placeholder="@(PlaceholderText)" AdornmentIcon="@Icons.Material.Filled.Tag" Adornment="Adornment.End"
  SelectedValues="_selectedTags" SelectedValuesChanged="OnSelectedTagsChanged" SelectAll="true" FullWidth="false"
  SelectAllText="All Tags" Immediate="true" Class="ms-3">
  @foreach (var tag in UserTagStore.Items)
  {
    <MudSelectItem Value="@tag">@tag.Name</MudSelectItem>
  }
</MudSelect>

@code {
  private HashSet<TagViewModel> _selectedTags = [];

  [Parameter]
  public EventCallback<ImmutableArray<TagViewModel>> SelectedTagsChanged { get; set; }

  [Parameter]
  public string PlaceholderText { get; set; } = "Filter devices by selecting tags";

  protected override async Task OnInitializedAsync()
  {
    await base.OnInitializedAsync();

    if (UserTagStore.Items.Count == 0)
    {
      await UserTagStore.Refresh();
    }

    _selectedTags = [.. UserTagStore.Items];
  }

  private string GetTagsMultiSelectText(List<string> tags)
  {
    if (tags.Count == 0)
    {
      return "No tags selected";
    }

    if (_selectedTags.Count == UserTagStore.Items.Count)
    {
      return "All tags selected";
    }
    
    var tagNoun = tags.Count > 1 ? "tags" : "tag";
    return $"{tags.Count} {tagNoun} selected";
  }

  private async Task OnSelectedTagsChanged(IEnumerable<TagViewModel?>? tags)
  {
    if (tags is null)
    {
      _selectedTags = [];
    }
    else
    {
      _selectedTags = tags
        .Where(x => x is not null)
        .Select(x => x!)
        .ToHashSet();
    }
    await SelectedTagsChanged.InvokeAsync([.._selectedTags]);
  }
} 