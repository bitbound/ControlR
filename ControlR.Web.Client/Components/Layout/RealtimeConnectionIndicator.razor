@inject ILazyDi<IViewerHubConnection> ViewerHub
@inject ILazyDi<IBusyCounter> BusyCounter
@inject ILazyDi<IMessenger> Messenger


@if (!RendererInfo.IsInteractive)
{
  <MudIcon Color="Color.Default" Icon="@(Icons.Material.Filled.OfflineBolt)" Class="mx-3 mt-1" Title="Disabled" />
}
else if (_isBusy && _hubConnectionState == HubConnectionState.Connected)
{
  <MudTooltip Text="@($"{_pendingOperations} operation(s) pending")">
    <MudProgressCircular Indeterminate StrokeWidth="6" Size="Size.Small" Color="Color.Success" Class="mx-3 mt-1" />
  </MudTooltip>
}
else
{
  switch (_hubConnectionState)
  {
    case HubConnectionState.Connected:
      if (OperatingSystem.IsBrowser())
      {
        <MudTooltip Text="Connected">
          <MudIcon Color="Color.Success" Icon="@(Icons.Material.Filled.Bolt)" Class="mx-3 mt-1" />
        </MudTooltip>
      }
      else
      {
        <MudTooltip Text="Connected (server-side rendered)">
          <MudIcon Color="Color.Warning" Icon="@(Icons.Material.Filled.Bolt)" Class="mx-3 mt-1" />
        </MudTooltip>
      }
      break;
    case HubConnectionState.Connecting or HubConnectionState.Reconnecting:
      <MudTooltip Text="Reconnecting">
        <MudProgressCircular Indeterminate StrokeWidth="6" Size="Size.Small" Color="Color.Warning" Class="mx-3 mt-1" />
      </MudTooltip>
      break;
    case HubConnectionState.Disconnected:
      <MudTooltip Text="Disconnected">
        <MudIcon Color="Color.Error" Icon="@(Icons.Material.Filled.OfflineBolt)" Class="mx-3 mt-1" />
      </MudTooltip>
      break;
  }
}

@code {
  private bool _isBusy;
  private int _pendingOperations;
  private HubConnectionState _hubConnectionState = HubConnectionState.Disconnected;

  protected override Task OnInitializedAsync()
  {
    if (RendererInfo.IsInteractive)
    {
      Messenger.Value.RegisterEventMessage(this, HandleGeneric);
      Messenger.Value.Register<HubConnectionStateChangedMessage>(this, HandleHubConnectionStateChanged);
    }
    return base.OnInitializedAsync();
  }

  protected override bool ShouldRender()
  {
    if (BusyCounter.Exists)
    {
      _isBusy = BusyCounter.Value.IsBusy;
      _pendingOperations = BusyCounter.Value.PendingOperations;
    }

    if (ViewerHub.Exists)
    {
      _hubConnectionState = ViewerHub.Value.ConnectionState;
    }

    return base.ShouldRender();
  }
  private async Task HandleGeneric(object subscriber, EventMessageKind kind)
  {
    switch (kind)
    {
      case EventMessageKind.PendingOperationsChanged:
        await InvokeAsync(StateHasChanged);
        break;
      default:
        return;
    }
  }

  private async Task HandleHubConnectionStateChanged(object subscriber, HubConnectionStateChangedMessage message)
  {
    _hubConnectionState = message.NewState;
    await InvokeAsync(StateHasChanged);
  }
}