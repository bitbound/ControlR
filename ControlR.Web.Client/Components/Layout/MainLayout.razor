@inherits LayoutComponentBase
@inject AuthenticationStateProvider AuthState
@inject NavigationManager NavManager
@inject IMessenger Messenger
@inject IViewerHubConnection ViewerHub
@inject ISnackbar Snackbar
@inject ILogger<MainLayout> Logger

<div>
  <MudThemeProvider IsDarkMode Theme="CustomTheme"/>
  <MudPopoverProvider/>
  <MudDialogProvider/>
  <MudSnackbarProvider/>

  <MudLayout>
    <MudAppBar Elevation="1">

      @if (RendererInfo.IsInteractive)
      {
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => ToggleNavDrawer())" />
      }
      else
      {
        <MudStaticNavDrawerToggle DrawerId="nav-drawer" Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit"
                                  Edge="Edge.Start"/>
      }

      <MudImage Src=@Assets["icon-192.png"] Height="30" Class="mx-2" />
      <MudLink Href="/" Underline="Underline.None">
        <MudText Typo="Typo.h6" Color="Color.Primary">ControlR</MudText>
      </MudLink>

      <MudSpacer/>

      <RealtimeConnectionIndicator />

      <MudTooltip Text="GitHub">
        <MudIconButton Icon="@Icons.Custom.Brands.GitHub"
                       Color="Color.Inherit"
                       Href="https://github.com/bitbound/controlr/"
                       Target="_blank"/>

      </MudTooltip>
    </MudAppBar>
    <MudDrawer @bind-Open="_drawerOpen"
               id="nav-drawer"
               ClipMode="DrawerClipMode.Always"
               Elevation="2">

      <NavMenu />
    </MudDrawer>
    <MudMainContent Class="mt-16 pa-4">
      @if (!RendererInfo.IsInteractive)
      {
        <div class="w-100 text-center mt-8">
          <MudText Typo="Typo.h4" Color="Color.Info" GutterBottom>
            Loading
          </MudText>
          <MudProgressCircular Min="0" Max="1" Indeterminate Color="Color.Info" Size="Size.Large"/>
        </div>
      }
      else
      {
        @Body
      }
    </MudMainContent>
  </MudLayout>

  <DeviceContentHarness/>
</div>


<div id="blazor-error-ui">
  An unhandled error has occurred.
  <a href="" class="reload">Reload</a>
  <a class="dismiss">🗙</a>
</div>

@code {
  private bool _drawerOpen = true;
  private bool _isAuthenticated;
  
  private MudTheme? _customTheme;

  private MudTheme CustomTheme
  {
    get
    {
      return _customTheme ??= new MudTheme
      {
        PaletteDark = Theme.DarkPalette
      };
    }
  }

  protected override async Task OnInitializedAsync()
  {
    await base.OnInitializedAsync();

    _isAuthenticated = await AuthState.IsAuthenticated();

    if (RendererInfo.IsInteractive)
    {
      Messenger.Register<ToastMessage>(this, HandleToastMessage);

      AuthState.AuthenticationStateChanged += HandleAuthenticationStateChanged;

      if (_isAuthenticated)
      {
        await ViewerHub.Connect();
      }
    }
  }


  private async void HandleAuthenticationStateChanged(Task<AuthenticationState> taskState)
  {
    try
    {
      var state = await taskState;
      _isAuthenticated = state.User.Identity?.IsAuthenticated ?? false;
      await InvokeAsync(StateHasChanged);

      if (_isAuthenticated)
      {
        await ViewerHub.Connect();
      }
    }
    catch (Exception ex)
    {
      Logger.LogError(ex, "Error while handling authentication state change.");
      Snackbar.Add("Authentication state change error", Severity.Error);
    }
  }


  private Task HandleToastMessage(object subscriber, ToastMessage toast)
  {
    Snackbar.Add(toast.Message, toast.Severity);
    return Task.CompletedTask;
  }

  private void ToggleNavDrawer()
  {
    _drawerOpen = !_drawerOpen;
  }

}