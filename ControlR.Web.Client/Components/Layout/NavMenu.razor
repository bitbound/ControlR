@implements IDisposable

@inject ILazyDi<NavigationManager> NavMan
@inject ILazyDi<PersistentAuthenticationStateProvider> AuthState
@inject ILogger<NavMenu> Logger

<MudNavMenu>
  <MudNavLink Href="" Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.Home">
    Home
  </MudNavLink>
  <MudNavLink Disabled="IsDisabled || !_isAuthenticated" Href="@(RouteNames.Deploy)" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.RocketLaunch">
    Deploy
  </MudNavLink>
  <MudNavLink Disabled="IsDisabled || !_isAuthenticated" Href="@(RouteNames.Settings)" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.Settings">
    Settings
  </MudNavLink>

  @if (_isServerAdmin)
  {
    <MudNavLink Disabled="IsDisabled || !_isAuthenticated" Href="@(RouteNames.ServerAdmin)" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.AdminPanelSettings">
      Server Admin
    </MudNavLink>
  }

  <MudNavLink Href="@(RouteNames.ServerAdmin)" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.QuestionMark">
    About
  </MudNavLink>

  <MudDivider Class="mt-2 mb-2"/>

  <AuthorizeView>
    <Authorized>
      <MudNavLink Disabled="@IsDisabled" Href="Account/Manage" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.Person">
        Account
      </MudNavLink>
      <form action="Account/Logout" method="post">
        <AntiforgeryToken/>
        <input type="hidden" name="ReturnUrl" value="@_currentUrl"/>
        <button type="submit" class="mud-nav-link mud-ripple">
          <MudIcon Icon="@Icons.Material.Filled.Logout" Color="Color.Info" Class="mr-3"></MudIcon> Logout
        </button>
      </form>
    </Authorized>
    <NotAuthorized>
      <MudNavLink Disabled="@IsDisabled" Href="Account/Register" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.Person">
        Register
      </MudNavLink>
      <MudNavLink Disabled="@IsDisabled" Href="Account/Login" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.Password">
        Login
      </MudNavLink>
    </NotAuthorized>
  </AuthorizeView>
</MudNavMenu>


@code {

  private string? _currentUrl;
  private bool _isServerAdmin;
  private bool _isAuthenticated;

  [Parameter] public bool IsDisabled { get; set; }


  public void Dispose()
  {
    if (NavMan.Exists)
    {
      NavMan.Value.LocationChanged -= OnLocationChanged;
    }

    if (AuthState.Exists)
    {
      AuthState.Value.AuthenticationStateChanged -= HandleAuthStateChanged;
    }
  }

  protected override async Task OnInitializedAsync()
  {
    await base.OnInitializedAsync();

    if (AuthState.Exists)
    {
      AuthState.Value.AuthenticationStateChanged += HandleAuthStateChanged;
    }

    if (NavMan.Exists)
    {
      _currentUrl = NavMan.Value.ToBaseRelativePath(NavMan.Value.Uri);
      NavMan.Value.LocationChanged += OnLocationChanged;
    }
  }

  private async void HandleAuthStateChanged(Task<AuthenticationState> stateTask)
  {
    try
    {
      var state = await stateTask;
      _isAuthenticated = state.User.Identity?.IsAuthenticated == true;
      await InvokeAsync(StateHasChanged);
    }
    catch (Exception ex)
    {
      Logger.LogError(ex, "Error while handling auth state change.");
    }
  }

  private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
  {
    _currentUrl = NavMan.Value.ToBaseRelativePath(e.Location);
    StateHasChanged();
  }

}