name: Build and Deploy

on:
  workflow_dispatch:
    inputs:
      docker_deploy_target:
        description: "Deploy to Docker"
        required: true
        type: choice
        options:
          - none
          - dev
          - preview
          - latest
        default: "none"
      github_release:
        description: "Deploy to GitHub Release"
        required: false
        type: choice
        options:
          - none
          - prerelease
          - latest
        default: "none"
      version:
        description: "Version number (leave empty for auto)"
        required: false
        type: string
  pull_request:
    branches: 
      - main
  push:
    branches:
      - main
    paths-ignore:
      - "README.md"
      - ".github/**"
      - "ControlR.Web.WebSocketRelay/**"
      - "Libraries/ControlR.Libraries.WebSocketRelay.Common/**"

env:
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
  DOTNET_NOLOGO: true
  MAJOR_VERSION: ${{vars.MAJOR_VERSION}}
  MINOR_VERSION: ${{vars.MINOR_VERSION}}

jobs:
  build:
    name: Build
    runs-on: self-hosted
    defaults:
      run:
        shell: pwsh
    outputs:
      version: ${{ steps.set_version.outputs.version }}

    steps:
      - name: Show Inputs
        run: |
          echo "Inputs: ${{ toJSON(github.event.inputs) }}"

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          clean: true

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: "9.0.x"

      - name: Set version
        id: set_version
        run: |
          $version = "${{ env.MAJOR_VERSION }}.${{ env.MINOR_VERSION }}.${{ github.run_number }}.0"
          if ("${{ inputs.version }}" -ne "") {
            $version = "${{ inputs.version }}"
          }
          echo "version=$version" >> $env:GITHUB_OUTPUT
          echo "Version: $version"

      - name: Run Tests
        run: dotnet test

      - name: Build and Publish
        run: |
          $outputPath = "${{ github.workspace }}\ControlR.Server\bin\publish"

          $buildParams = @{
            "-CertificateThumbprint" = "${{ secrets.CODE_SIGN_THUMBPRINT }}"
            "-SignToolPath" = "${{ vars.SIGN_TOOL_PATH }}"
            "-OutputPath" = $outputPath
            "-CurrentVersion" = "${{ steps.set_version.outputs.version }}"
            "-BuildAgent" = $true
            "-BuildStreamer" = $true
          }

          & ".\.build\Build.ps1" @buildParams

      - name: Upload Server Artifact
        uses: actions/upload-artifact@v4
        with:
          name: server-bin
          path: ControlR.Server\bin\publish
          retention-days: 7

      - name: Upload docker-compose file
        uses: actions/upload-artifact@v4
        with:
          name: docker-compose
          path: docker-compose\docker-compose.yml
          retention-days: 7

  deploy_docker:
    name: Deploy to Docker
    runs-on: self-hosted
    needs: build
    defaults:
      run:
        shell: pwsh
    if: ${{ github.event.inputs.docker_deploy_target && github.event.inputs.docker_deploy_target != 'none' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download server artifact
        uses: actions/download-artifact@v4
        with:
          name: server-bin
          path: ./server-publish

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PAT }}

      - name: Verify Download Files
        shell: pwsh
        run: |
          $TestPaths = @(
            "./server-publish/wwwroot/downloads/AgentVersion.txt",
            "./server-publish/wwwroot/downloads/win-x86/ControlR.Agent.exe",
            "./server-publish/wwwroot/downloads/win-x86/ControlR.Streamer.zip",
            "./server-publish/wwwroot/downloads/linux-x64/ControlR.Agent"
          )
          foreach ($TestPath in $TestPaths) {
            if (!(Test-Path $TestPath)) {
              Write-Error "$TestPath not found."
              exit 1
            }
          }

      - name: Create Custom Dockerfile
        shell: pwsh
        run: |
          $DockerFile = @"
          FROM mcr.microsoft.com/dotnet/aspnet:9.0
          RUN apt update
          RUN apt -y install curl
          RUN mkdir -p /app/AppData
          RUN chown app:app -R /app/AppData
          USER app
          WORKDIR /app
          EXPOSE 8080
          EXPOSE 8081

          COPY . /app

          ENTRYPOINT ["dotnet", "ControlR.Web.Server.dll"]

          HEALTHCHECK \
            CMD curl -f http://localhost:8080/health || exit 1
          "@

          Set-Content -Path "./server-publish/Dockerfile" -Value $DockerFile -Force

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./server-publish
          file: ./server-publish/Dockerfile
          push: true
          tags: |
            translucency/controlr:${{ github.event.inputs.docker_deploy_target }}
            translucency/controlr:${{ needs.build.outputs.version }}
          build-args: |
            CURRENT_VERSION=${{ needs.build.outputs.version }}

  create_github_release:
    name: Create GitHub Release
    runs-on: self-hosted
    needs: build
    permissions:
      contents: write

    defaults:
      run:
        shell: pwsh
    if: ${{ github.event.inputs.github_release && github.event.inputs.github_release != 'none' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download server artifact
        uses: actions/download-artifact@v4
        with:
          name: server-bin
          path: ./server-publish

      - name: Download docker-compose file
        uses: actions/download-artifact@v4
        with:
          name: docker-compose
          path: ./

      - name: Create release archive
        run: |
          # Create server zip
          Compress-Archive -Path ".\server-publish\*" -DestinationPath "ControlR.Server.${{ needs.build.outputs.version }}.zip" -Force

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          name: v${{ needs.build.outputs.version }} Release
          tag_name: v${{ needs.build.outputs.version }}
          draft: true
          prerelease: ${{ github.event.inputs.github_release == 'prerelease' }}
          generate_release_notes: true
          files: |
            ControlR.Server.${{ needs.build.outputs.version }}.zip
            docker-compose.yml
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
